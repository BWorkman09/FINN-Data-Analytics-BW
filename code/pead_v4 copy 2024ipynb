{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading library list...\n",
      "Done\n"
     ]
    }
   ],
   "source": [
    "#####################################\n",
    "# Post Earnings Announcement Drift  #\n",
    "# Qingyi (Freda) Song Drechsler     #\n",
    "# Date: June 2019                   #\n",
    "# Update: Jan 2021                  #\n",
    "#####################################\n",
    "\n",
    "# Update Note: this version uses CRSP data to extract S&P500 Index constituents,\n",
    "# as comp.idxcst_hist data is no longer available on WRDS\n",
    "# Also updated various .loc usage that has been deprecated by Python.\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import wrds\n",
    "import matplotlib.pyplot as plt\n",
    "from dateutil.relativedelta import *\n",
    "import datetime\n",
    "from pathlib import Path\n",
    "\n",
    "###################\n",
    "# Connect to WRDS #\n",
    "###################\n",
    "conn=wrds.Connection()\n",
    "\n",
    "# set sample date range\n",
    "begdate = '01/01/2010'\n",
    "enddate = '12/31/2018'\n",
    "\n",
    "# set CRSP date range a bit wider to guarantee collecting all information\n",
    "crsp_begdate = '01/01/2009'\n",
    "crsp_enddate = '12/31/2019'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#################################\n",
    "# Step 0: Read in ICLINK output #\n",
    "#################################\n",
    "\n",
    "# iclink.csv is the output from the python program iclink\n",
    "# it contains the linking between crsp and ibes\n",
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "# Define the base path to your project directory\n",
    "base_path = r\"C:\\Users\\bwworkma\\Desktop\\FINN Analytics\\FINN-Data-Analytics-BW\"\n",
    "\n",
    "# Now read the CSV\n",
    "iclink = pd.read_csv(os.path.join(base_path, 'data', 'iclink_v1.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "##################################\n",
    "# Step 1. S&P 500 Index Universe #\n",
    "##################################\n",
    "\n",
    "# All companies that were ever included in S&P 500 index as an example\n",
    "# Old version of the code uses comp.idxcst_his\n",
    "\n",
    "# New code uses crsp.msp500list\n",
    "# Linking Compustat GVKEY and IBES Tickers using ICLINK               \n",
    "# For unmatched GVKEYs, use header IBTIC link in Compustat Security file \n",
    "\n",
    "\n",
    "sp500 = conn.raw_sql(f\"\"\"\n",
    "                        select a.*\n",
    "                        from crsp.msp500list as a;\n",
    "                        \"\"\", date_cols=['start', 'ending'])\n",
    "\n",
    "# CCM data\n",
    "_ccm = conn.raw_sql(\"\"\" select gvkey, lpermco as permco, lpermno as permno, \n",
    "                        linkdt, linkenddt \n",
    "                        from crsp.ccmxpf_linktable \n",
    "                        where usedflag=1 \n",
    "                        and linkprim in ('P', 'C')\"\"\", date_cols=['linkdt', 'linkenddt'])\n",
    "\n",
    "_ccm[['permco', 'permno']] = _ccm[['permco', 'permno']].astype(int)\n",
    "\n",
    "# Fill linkenddt missing value (.E in SAS dataset) with today's date\n",
    "_ccm['linkenddt'] = _ccm.linkenddt.fillna(pd.Timestamp.today())\n",
    "\n",
    "_sec = conn.raw_sql(\"\"\" select ibtic, gvkey from comp.security \"\"\")\n",
    "\n",
    "\n",
    "# Start the sequence of left join\n",
    "gvkey = pd.merge(sp500, _ccm, how='left', on=['permno'])\n",
    "gvkey = pd.merge(gvkey, _sec.loc[_sec.ibtic.notna()], how='left', on=['gvkey'])\n",
    "\n",
    "# high quality links from iclink\n",
    "# score = 0 or 1\n",
    "iclink_hq = iclink.loc[(iclink.score <=1)]\n",
    "\n",
    "gvkey = pd.merge(gvkey, iclink_hq, how='left', on=['permno'])\n",
    "\n",
    "# fill missing ticker with ibtic\n",
    "gvkey.ticker = np.where(gvkey.ticker.notnull(), gvkey.ticker, gvkey.ibtic)\n",
    "\n",
    "# Keep relevant columns and drop duplicates if there is any\n",
    "gvkey = gvkey[['gvkey', 'permco', 'permno', 'linkdt', 'linkenddt','ticker']]\n",
    "\n",
    "gvkey = gvkey.drop_duplicates()\n",
    "\n",
    "# date ranges from gvkey\n",
    "# min linkdt for ticker and permno combination\n",
    "gvkey_mindt = gvkey.groupby(['ticker','permno']).linkdt.min().reset_index()\n",
    "\n",
    "# max linkenddt for ticker and permno combination\n",
    "gvkey_maxdt = gvkey.groupby(['ticker','permno'])['linkenddt'].max().reset_index()\n",
    "\n",
    "# link date range \n",
    "gvkey_dt = pd.merge(gvkey_mindt, gvkey_maxdt, how='inner', on=['ticker','permno'])\n",
    "\n",
    "\n",
    "# null unused dataframes to free memory\n",
    "sp500 = None\n",
    "_ccm = None\n",
    "_ssec = None\n",
    "iclink = None\n",
    "gvkey_mindt = None\n",
    "gvkey_maxdt = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#######################################\n",
    "# Step 2. Extract Estimates from IBES #\n",
    "#######################################\n",
    "\n",
    "# Extract estimates from IBES Unadjusted file and select    \n",
    "# the latest estimate for a firm within broker-analyst group\n",
    "# \"fpi in (6,7)\" selects quarterly forecast for the current \n",
    "# and the next fiscal quarter    \n",
    "\n",
    "ibes_temp = conn.raw_sql(f\"\"\"\n",
    "                        select ticker, estimator, analys, pdf, fpi, value, \n",
    "                        fpedats, revdats, revtims, anndats, anntims\n",
    "                        from ibes.detu_epsus \n",
    "                        where fpedats between '{begdate}' and '{enddate}'\n",
    "                        and (fpi='6' or fpi='7')\n",
    "                        \"\"\", date_cols = ['revdats', 'anndats', 'fpedats'])\n",
    "\n",
    "\n",
    "# merge to get date range linkdt and linkenddt to fulfill date requirement\n",
    "ibes_temp = pd.merge(ibes_temp, gvkey_dt, how='left', on=['ticker'])\n",
    "ibes_temp = ibes_temp.loc[(ibes_temp.linkdt<=ibes_temp.anndats) & (ibes_temp.anndats <= ibes_temp.linkenddt)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\local_bwworkma\\Temp\\ipykernel_13752\\2260217143.py:25: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  ibes_1 = ibes.groupby(['ticker','fpedats','estimator','analys']).apply(lambda x: x.index[-1]).to_frame().reset_index()\n"
     ]
    }
   ],
   "source": [
    "# Count number of estimates reported on primary/diluted basis \n",
    "\n",
    "p_sub = ibes_temp[['ticker','fpedats','pdf']].loc[ibes_temp.pdf=='P']\n",
    "d_sub = ibes_temp[['ticker','fpedats','pdf']].loc[ibes_temp.pdf=='D']\n",
    "\n",
    "p_count = p_sub.groupby(['ticker','fpedats']).pdf.count().reset_index().rename(columns={'pdf':'p_count'})\n",
    "d_count = d_sub.groupby(['ticker','fpedats']).pdf.count().reset_index().rename(columns={'pdf':'d_count'})\n",
    "\n",
    "ibes = pd.merge(ibes_temp, d_count, how = 'left', on=['ticker', 'fpedats'])\n",
    "ibes = pd.merge(ibes, p_count, how='left', on =['ticker','fpedats'])\n",
    "ibes['d_count'] = ibes.d_count.fillna(0)\n",
    "ibes['p_count'] = ibes.p_count.fillna(0)\n",
    "\n",
    "# Determine whether most analysts report estimates on primary/diluted basis\n",
    "# following Livnat and Mendenhall (2006)                                   \n",
    "\n",
    "ibes['basis']=np.where(ibes.p_count>ibes.d_count, 'P', 'D')\n",
    "\n",
    "ibes = ibes.sort_values(by=['ticker','fpedats','estimator','analys','anndats', 'anntims', 'revdats', 'revtims'])\\\n",
    ".drop(['linkdt', 'linkenddt','p_count','d_count', 'pdf', 'fpi'], axis=1)\n",
    "\n",
    "# Keep the latest observation for a given analyst\n",
    "# Group by company fpedats estimator analys then pick the last record in the group\n",
    "\n",
    "ibes_1 = ibes.groupby(['ticker','fpedats','estimator','analys']).apply(lambda x: x.index[-1]).to_frame().reset_index()\n",
    "\n",
    "# reset index to the old dataframe index for join in the next step\n",
    "ibes_1=ibes_1.set_index(0)\n",
    "\n",
    "# Inner join with the last analyst record per group\n",
    "ibes = pd.merge(ibes, ibes_1[['analys']], left_index=True, right_index=True)\n",
    "\n",
    "# drop duplicate column\n",
    "ibes=ibes.drop(['analys_y'], axis=1).rename(columns={'analys_x': 'analys'})\n",
    "\n",
    "\n",
    "# null unneeded dataframes\n",
    "ibes_temp = None\n",
    "p_sub = None\n",
    "d_sub = None\n",
    "p_count = None\n",
    "d_count = None\n",
    "gvkey_dt = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#######################################\n",
    "# Step 3. Link Estimates with Actuals #\n",
    "#######################################\n",
    "\n",
    "# Link Unadjusted estimates with Unadjusted actuals and CRSP permnos  \n",
    "# Keep only the estimates issued within 90 days before the report date\n",
    "\n",
    "# Getting actual piece of data\n",
    "ibes_act = conn.raw_sql(f\"\"\"\n",
    "                        select ticker, anndats as repdats, value as act, pends as fpedats, pdicity\n",
    "                        from ibes.actu_epsus \n",
    "                        where pends between '{begdate}' and '{enddate}'\n",
    "                        and pdicity='QTR'\n",
    "                        \"\"\", date_cols = ['repdats', 'fpedats'])\n",
    "\n",
    "\n",
    "# Join with the estimate piece of the data\n",
    "\n",
    "ibes1 = pd.merge(ibes, ibes_act, how='left', on = ['ticker','fpedats'])\n",
    "ibes1['dgap'] = ibes1.repdats - ibes1.anndats\n",
    "\n",
    "ibes1['flag'] = np.where( (ibes1.dgap>=datetime.timedelta(days=0)) & (ibes1.dgap<=datetime.timedelta(days=90)) & (ibes1.repdats.notna()) & (ibes1.anndats.notna()), 1, 0)\n",
    "\n",
    "ibes1 = ibes1.loc[ibes1.flag==1].drop(['flag', 'dgap', 'pdicity'], axis=1)\n",
    "\n",
    "# Select all relevant combinations of Permnos and Date\n",
    "\n",
    "ibes1_dt1 = ibes1[['permno', 'anndats']].drop_duplicates()\n",
    "\n",
    "ibes1_dt2 = ibes1[['permno', 'repdats']].drop_duplicates().rename(columns={'repdats':'anndats'})\n",
    "\n",
    "ibes_anndats = pd.concat([ibes1_dt1, ibes1_dt2]).drop_duplicates()\n",
    "\n",
    "# null dataframes no longer needed to free memory\n",
    "ibes1_dt1 = None\n",
    "ibes1_dt2 = None\n",
    "ibes_act = None\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adjust all estimate and earnings announcement dates to the closest\n",
    "# preceding trading date in CRSP to ensure that adjustment factors won't\n",
    "# be missing after the merge  \n",
    "\n",
    "# unique anndats from ibes\n",
    "uniq_anndats = ibes_anndats[['anndats']].drop_duplicates()\n",
    "\n",
    "# unique trade dates from crsp.dsi\n",
    "crsp_dats = conn.raw_sql(\"\"\" \n",
    "                            select date \n",
    "                            from crsp.dsi \n",
    "                         \"\"\", date_cols=['date'])\n",
    "\n",
    "# Create up to 5 days prior dates relative to anndats\n",
    "\n",
    "for i in range(0, 5):\n",
    "    uniq_anndats[i] = uniq_anndats.anndats - datetime.timedelta(days=i)\n",
    "\n",
    "# reshape (transpose) the df for later join with crsp trading dates\n",
    "\n",
    "expand_anndats = uniq_anndats.set_index('anndats').stack().reset_index().\\\n",
    "rename(columns={'level_1':'prior', 0:'prior_date'})\n",
    "\n",
    "# merge with crsp trading dates\n",
    "tradedates = pd.merge(expand_anndats, crsp_dats, how='left', left_on=['prior_date'], right_on=['date'])\n",
    "\n",
    "# create the dgap (days gap) variable for min selection\n",
    "tradedates['dgap'] = tradedates.anndats-tradedates.date\n",
    "\n",
    "# choosing the row with the smallest dgap for a given anndats\n",
    "tradedates = tradedates.loc[tradedates.groupby('anndats')['dgap'].idxmin()]\n",
    "\n",
    "tradedates = tradedates[['anndats', 'date']]\n",
    "\n",
    "# null unneeded dataframes\n",
    "unique_anndats = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merge the CRSP adjustment factors for all estimate and report dates\n",
    "\n",
    "# extract CRSP adjustment factors\n",
    "cfacshr = conn.raw_sql(f\"\"\"\n",
    "                        select permno, date, cfacshr\n",
    "                        from crsp.dsf\n",
    "                        where date between '{crsp_begdate}' and '{crsp_enddate}'\n",
    "                        \"\"\", date_cols = ['date'])\n",
    "\n",
    "ibes_anndats = pd.merge(ibes_anndats, tradedates, how='left', on = ['anndats'])\n",
    "\n",
    "ibes_anndats = pd.merge(ibes_anndats, cfacshr, how='left', on=['permno', 'date'])\n",
    "\n",
    "# null unneeded datasets\n",
    "cfacshr = None\n",
    "tradedates = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#########################################\n",
    "# Step 4. Adjust Estimates with CFACSHR #\n",
    "#########################################\n",
    "\n",
    "# Put the estimate on the same per share basis as\n",
    "# company reported EPS using CRSP Adjustment factors. \n",
    "# New_value is the estimate adjusted to be on the \n",
    "# same basis with reported earnings.\n",
    "\n",
    "ibes1 = pd.merge(ibes1, ibes_anndats, how='inner', on=['permno', 'anndats'])\n",
    "ibes1 = ibes1.drop(['anndats','date'], axis=1).rename(columns={'cfacshr':'cfacshr_ann'})\n",
    "\n",
    "ibes1 = pd.merge(ibes1, ibes_anndats, how='inner', left_on=['permno', 'repdats'], right_on=['permno','anndats'])\n",
    "ibes1 = ibes1.drop(['anndats','date'], axis=1).rename(columns={'cfacshr':'cfacshr_rep'})\n",
    "\n",
    "ibes1['new_value'] = (ibes1.cfacshr_rep/ibes1.cfacshr_ann)*ibes1.value\n",
    "\n",
    "# Sanity check: there should be one most recent estimate for \n",
    "# a given firm-fiscal period end combination \n",
    "ibes1 = ibes1.sort_values(by=['ticker','fpedats','estimator','analys']).drop_duplicates()\n",
    "\n",
    "ibes = None # done w/ frame, free up memory\n",
    "ibes_anndats = None\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the median forecast based on estimates in the 90 days prior to the EAD\n",
    "\n",
    "grp_permno = ibes1.groupby(['ticker','fpedats', 'basis','repdats', 'act']).permno.max().reset_index()\n",
    "\n",
    "medest = ibes1.groupby(['ticker','fpedats', 'basis','repdats', 'act']).new_value.agg(['median','count']).reset_index()\n",
    "medest = pd.merge(medest, grp_permno, how='inner', on=['ticker','fpedats','basis', 'repdats', 'act'])\n",
    "medest = medest.rename(columns={'median': 'medest', 'count':'numest'})\n",
    "\n",
    "\n",
    "ibes1 = None # null to free memory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\bwworkma\\AppData\\Roaming\\Python\\Python312\\site-packages\\wrds\\sql.py:579: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  for chunk in df:\n",
      "C:\\Users\\bwworkma\\AppData\\Roaming\\Python\\Python312\\site-packages\\wrds\\sql.py:579: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  for chunk in df:\n"
     ]
    }
   ],
   "source": [
    "######################################\n",
    "# Step 5. Merge with Compustat Data  #\n",
    "######################################\n",
    "\n",
    "# get items from fundq\n",
    "fundq = conn.raw_sql(f\"\"\"\n",
    "                        select gvkey, fyearq, fqtr, conm, datadate, rdq, epsfxq, epspxq, cshoq, prccq, \n",
    "                        ajexq, spiq, cshoq, cshprq, cshfdq, saleq, atq, fyr, datafqtr, cshoq*prccq as mcap  \n",
    "                        from comp.fundq \n",
    "                        where consol='C' and popsrc='D' and indfmt='INDL' and datafmt='STD'\n",
    "                        and datadate between '{crsp_begdate}' and '{crsp_enddate}' \n",
    "                        \"\"\", date_cols = ['datadate', 'datafqtr', 'rdq'])\n",
    "\n",
    "fundq = fundq.loc[((fundq.atq>0) | (fundq.saleq.notna())) & (fundq.datafqtr.notna())]\n",
    "\n",
    "\n",
    "# Calculate link date ranges for givken gvkey and ticker combination\n",
    "\n",
    "gvkey_mindt1 = gvkey.groupby(['gvkey', 'ticker']).linkdt.min().reset_index().rename(columns={'linkdt':'mindate'})\n",
    "gvkey_maxdt1 = gvkey.groupby(['gvkey', 'ticker']).linkenddt.max().reset_index().rename(columns={'linkenddt':'maxdate'})\n",
    "gvkey_dt1 = pd.merge(gvkey_mindt1, gvkey_maxdt1, how='inner', on=['gvkey','ticker'])\n",
    "\n",
    "\n",
    "# Use the date range to merge\n",
    "comp = pd.merge(fundq, gvkey_dt1, how='left', on =['gvkey'])\n",
    "comp = comp.loc[(comp.ticker.notna()) & (comp.datadate<=comp.maxdate) & (comp.datadate>=comp.mindate)]\n",
    "\n",
    "# Merge with the median esitmates\n",
    "comp = pd.merge(comp, medest, how = 'left', left_on=['ticker','datadate'], right_on=['ticker', 'fpedats'])\n",
    "\n",
    "# Sort data and drop duplicates\n",
    "comp = comp.sort_values(by=['gvkey','fqtr','fyearq']).drop_duplicates()\n",
    "\n",
    "\n",
    "# null unneeeded dataframes to free memory\n",
    "gvkey = None\n",
    "gvkey_dt1 = None\n",
    "fundq = None\n",
    "medest = None\n",
    "gvkey_mindt1 = None\n",
    "gvkey_maxdt1 = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\local_bwworkma\\Temp\\ipykernel_13752\\2089117555.py:48: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  (sue.lageps_d.fillna(0)-(0.65*sue.lagspiq/sue.lagshr_d).fillna(0))/sue.lagadj, \\\n",
      "C:\\Users\\local_bwworkma\\Temp\\ipykernel_13752\\2089117555.py:49: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  (sue.lageps_p.fillna(0)-(0.65*sue.lagspiq/sue.lagshr_p).fillna(0))/sue.lagadj\n"
     ]
    }
   ],
   "source": [
    "###########################\n",
    "# Step 6. Calculate SUEs  #\n",
    "###########################\n",
    "\n",
    "# block handling lag eps\n",
    "\n",
    "sue = comp.sort_values(by=['gvkey','fqtr','fyearq'])\n",
    "\n",
    "sue['dif_fyearq'] = sue.groupby(['gvkey', 'fqtr']).fyearq.diff()\n",
    "sue['laggvkey']   = sue.gvkey.shift(1)\n",
    "\n",
    "# handling same qtr previous year\n",
    "\n",
    "cond_year = sue.dif_fyearq==1 # year increment is 1\n",
    "\n",
    "sue['lagadj']     = np.where(cond_year, sue.ajexq.shift(1), None)\n",
    "sue['lageps_p']   = np.where(cond_year, sue.epspxq.shift(1), None)\n",
    "sue['lageps_d']   = np.where(cond_year, sue.epsfxq.shift(1), None)\n",
    "sue['lagshr_p']   = np.where(cond_year, sue.cshprq.shift(1), None)\n",
    "sue['lagshr_d']   = np.where(cond_year, sue.cshfdq.shift(1), None)\n",
    "sue['lagspiq']    = np.where(cond_year, sue.spiq.shift(1), None)\n",
    "\n",
    "# handling first gvkey\n",
    "\n",
    "cond_gvkey = sue.gvkey != sue.laggvkey # first.gvkey\n",
    "\n",
    "sue['lagadj']     = np.where(cond_gvkey, None, sue.lagadj)\n",
    "sue['lageps_p']   = np.where(cond_gvkey, None, sue.lageps_p)\n",
    "sue['lageps_d']   = np.where(cond_gvkey, None, sue.lageps_d)\n",
    "sue['lagshr_p']   = np.where(cond_gvkey, None, sue.lagshr_p)\n",
    "sue['lagshr_d']   = np.where(cond_gvkey, None, sue.lagshr_d)\n",
    "sue['lagspiq']    = np.where(cond_gvkey, None, sue.lagspiq)\n",
    "\n",
    "\n",
    "# handling reporting basis \n",
    "\n",
    "# Basis = P and missing are treated the same\n",
    "\n",
    "sue['actual1'] = np.where(sue.basis=='D', sue.epsfxq/sue.ajexq, sue.epspxq/sue.ajexq)\n",
    "\n",
    "sue['actual2'] = np.where(sue.basis=='D', \\\n",
    "                            (sue.epsfxq.fillna(0)-(0.65*sue.spiq/sue.cshfdq).fillna(0))/sue.ajexq, \\\n",
    "                            (sue.epspxq.fillna(0)-(0.65*sue.spiq/sue.cshprq).fillna(0))/sue.ajexq\n",
    "                           )\n",
    "\n",
    "sue['expected1'] = np.where(sue.basis=='D', sue.lageps_d/sue.lagadj, sue.lageps_p/sue.lagadj)\n",
    "sue['expected2'] = np.where(sue.basis=='D', \\\n",
    "                              (sue.lageps_d.fillna(0)-(0.65*sue.lagspiq/sue.lagshr_d).fillna(0))/sue.lagadj, \\\n",
    "                              (sue.lageps_p.fillna(0)-(0.65*sue.lagspiq/sue.lagshr_p).fillna(0))/sue.lagadj\n",
    "                             )\n",
    "\n",
    "# SUE calculations\n",
    "sue['sue1'] = (sue.actual1 - sue.expected1) / (sue.prccq/sue.ajexq)\n",
    "sue['sue2'] = (sue.actual2 - sue.expected2) / (sue.prccq/sue.ajexq)\n",
    "sue['sue3'] = (sue.act - sue.medest) / sue.prccq\n",
    "\n",
    "sue = sue[['ticker','permno','gvkey','conm','fyearq','fqtr','fyr','datadate','repdats','rdq', \\\n",
    "           'sue1','sue2','sue3','basis','act','medest','numest','prccq','mcap']]\n",
    "\n",
    "# Shifting the announcement date to be the next trading day\n",
    "# Defining the day after the following quarterly EA as leadrdq1\n",
    "\n",
    "# unique rdq \n",
    "uniq_rdq = comp[['rdq']].drop_duplicates()\n",
    "\n",
    "# Create up to 5 days post rdq relative to rdq\n",
    "for i in range(0, 5):\n",
    "    uniq_rdq[i] = uniq_rdq.rdq + datetime.timedelta(days=i)\n",
    "\n",
    "# reshape (transpose) for later join with crsp trading dates\n",
    "expand_rdq = uniq_rdq.set_index('rdq').stack().reset_index().\\\n",
    "rename(columns={'level_1':'post', 0:'post_date'})\n",
    "\n",
    "# merge with crsp trading dates\n",
    "eads1 = pd.merge(expand_rdq, crsp_dats, how='left', left_on=['post_date'], right_on=['date'])\n",
    "\n",
    "# create the dgap (days gap) variable for min selection\n",
    "eads1['dgap'] = eads1.date-eads1.rdq\n",
    "\n",
    "# LOC deprecated, use reindex instead\n",
    "#eads1 = eads1.loc[eads1.groupby('rdq')['dgap'].idxmin()].rename(columns={'date':'rdq1'})\n",
    "eads1 = eads1.reindex(eads1.groupby('rdq')['dgap'].idxmin()).rename(columns={'date':'rdq1'})\n",
    "\n",
    "# create sue_final\n",
    "sue_final = pd.merge(sue, eads1[['rdq','rdq1']], how='left', on=['rdq'])\n",
    "sue_final = sue_final.sort_values(by=['gvkey', 'fyearq','fqtr'], ascending=[True, False, False]).drop_duplicates()\n",
    "\n",
    "\n",
    "# null unneeded dataframes\n",
    "sue = None\n",
    "comp = None\n",
    "eads1 = None\n",
    "crsp_dats = None\n",
    "expand_rdq = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Filter from Livnat & Mendenhall (2006):                                \n",
    "#- earnings announcement date is reported in Compustat                   \n",
    "#- the price per share is available from Compustat at fiscal quarter end  \n",
    "#- price is greater than $1                                              \n",
    "#- the market (book) equity at fiscal quarter end is available and is    \n",
    "# EADs in Compustat and in IBES (if available)should not differ by more  \n",
    "# than one calendar day larger than $5 mil.                              \n",
    "\n",
    "sue_final['leadrdq1'] = sue_final.rdq1.shift(1) # next consecutive EAD\n",
    "sue_final['leadgvkey'] = sue_final.gvkey.shift(1)\n",
    "\n",
    "# If first gvkey then leadrdq1 = rdq1+3 months\n",
    "# Else leadrdq1 = previous rdq1\n",
    "\n",
    "sue_final['leadrdq1'] = np.where(sue_final.gvkey == sue_final.leadgvkey, \n",
    "                                  sue_final.rdq1.shift(1), \n",
    "                                  sue_final.rdq1 + pd.DateOffset(months=3))\n",
    "\n",
    "\n",
    "#sue_final['dgap'] = (sue_final.repdats - sue_final.rdq).fillna(0)\n",
    "sue_final['dgap'] = (sue_final.repdats - sue_final.rdq).fillna(pd.Timedelta(days=0))\n",
    "sue_final = sue_final.loc[(sue_final.rdq1 != sue_final.leadrdq1)]\n",
    "\n",
    "# Various conditioning for filtering\n",
    "cond1 = (sue_final.sue1.notna()) & (sue_final.sue2.notna()) & (sue_final.repdats.isna())\n",
    "cond2 = (sue_final.repdats.notna()) & (sue_final.dgap<=datetime.timedelta(days=1)) & (sue_final.dgap>=datetime.timedelta(days=-1))\n",
    "sue_final = sue_final.loc[cond1 | cond2]\n",
    "\n",
    "# Impose restriction on price and marketcap\n",
    "sue_final = sue_final.loc[(sue_final.rdq.notna()) & (sue_final.prccq>1) & (sue_final.mcap>5)]\n",
    "\n",
    "# Keep relevant columns\n",
    "sue_final = sue_final[['gvkey', 'ticker','permno','conm', 'dgap',\\\n",
    "                       'fyearq','fqtr','datadate','fyr','rdq','rdq1','leadrdq1','repdats',\\\n",
    "                       'mcap','medest','act','numest','basis','sue1','sue2','sue3']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#########################################\n",
    "# Step 7. Form Portfolios Based on SUE  #\n",
    "#########################################\n",
    "\n",
    "# Extract file of raw daily returns around and between EADs and link them \n",
    "# to Standardized Earnings Surprises for forming SUE-based portfolios  \n",
    "# Records from dsf and dsi to calculate exret\n",
    "ds = conn.raw_sql(f\"\"\"\n",
    "                        select permno, dsf.date, prc, abs(prc*shrout) as mcap, ret, vwretd\n",
    "                        from crsp.dsf\n",
    "                        left join crsp.dsi using(date)\n",
    "                        where date between '{crsp_begdate}' and '{crsp_enddate}'\n",
    "                        \"\"\", date_cols = ['date'])\n",
    "ds['exret'] = ds.ret - ds.vwretd\n",
    "ds = ds.rename(columns={'vwretd':'mkt'})\n",
    "\n",
    "# Records from sue_final that meet the condition\n",
    "sue_final_join = sue_final.loc[(sue_final.rdq.notna()) & (sue_final.leadrdq1.notna()) & (sue_final.permno.notna()) \\\n",
    "                               & (sue_final.leadrdq1-sue_final.rdq1>datetime.timedelta(days=30))]\n",
    "sue_final_join1 = sue_final_join.copy()\n",
    "sue_final_join1['lb_date'] = sue_final_join.rdq1-datetime.timedelta(days=5)\n",
    "sue_final_join1['ub_date'] = sue_final_join.leadrdq1+datetime.timedelta(days=5)\n",
    "\n",
    "sue_final_join = None # null orig copy to free memory\n",
    "sue_final = None\n",
    "sfj_indexed = sue_final_join1[['permno','rdq1', 'leadrdq1','sue1','sue2','sue3', 'lb_date','ub_date']].set_index('permno')\n",
    "sue_final_join1 = None\n",
    "# downcasting the columns in ds reduces the size by about ~40%\n",
    "# this savings is needed for the expensive join\n",
    "for col in ['prc','mcap','ret','mkt','exret']:\n",
    "    ds[col] = pd.to_numeric(ds[col], downcast='float')\n",
    "ds['permno'] = pd.to_numeric(ds['permno'], downcast='integer')\n",
    "\n",
    "#category is useful for repeated objects/strings/numbers\n",
    "#while this operation will increase sfj_indexed's size it will reduce\n",
    "#the size of the resulting join b/c these values will be repeated\n",
    "for col in ['sue1','sue2','sue3']:\n",
    "    sfj_indexed[col] = sfj_indexed[col].astype('category')\n",
    "    \n",
    "#the commented out join is very memory intensive >15GB RAM\n",
    "#break it into chunks and filter as we go to keep it under that\n",
    "# crsprets = ds.join(sfj_indexed, how='left', on='permno')\n",
    "# crsprets.query('date<=ub_date', inplace=True)\n",
    "# crsprets.query('date>=lb_date', inplace=True)\n",
    "crsprets = pd.DataFrame()\n",
    "n = 20000 #20000 needs about 14GB, 10000 about 10GB\n",
    "for i in range(0, sfj_indexed.shape[0], n): \n",
    "    chunks =   sfj_indexed.iloc[i:i + n]\n",
    "    merged = ds.join(chunks, on='permno', how='left')\n",
    "    chunks = None\n",
    "    merged.query('date<=ub_date', inplace=True)\n",
    "    merged.query('date>=lb_date', inplace=True)\n",
    "    crsprets = pd.concat([crsprets, merged] )\n",
    "    merged = None\n",
    "\n",
    "# null unneeded dataframes\n",
    "ds = None\n",
    "sfj_indexed = None\n",
    "crsprets = crsprets.drop(['lb_date','ub_date'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To estimate the drift, sum daily returns over the period from  \n",
    "# 1 day after the earnings announcement through the day of       \n",
    "# the following quarterly earnings announcement       \n",
    "\n",
    "temp = crsprets.sort_values(by=['permno', 'rdq1', 'date'])\n",
    "temp['lpermno'] = temp.permno.shift(1)\n",
    "\n",
    "# If first permno then lagmcap = missing \n",
    "# Else lagmcap = lag(mcap)\n",
    "temp['lagmcap'] = np.where(temp.permno == temp.lpermno, \n",
    "                                  temp.mcap.shift(1), \n",
    "                                  None)\n",
    "\n",
    "temp = temp.loc[(temp.rdq1<=temp.date) & (temp.date<=temp.leadrdq1)]\n",
    "\n",
    "# create count variable within the group\n",
    "temp['ncount'] = temp.groupby(['permno','rdq1']).cumcount()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "permno             int32\n",
      "rdq1      datetime64[ns]\n",
      "ncount             int64\n",
      "dtype: object\n",
      "permno             int32\n",
      "rdq1      datetime64[ns]\n",
      "ncount             int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(peadrets[['permno', 'rdq1', 'ncount']].dtypes)\n",
    "print(temp[['permno', 'rdq1', 'ncount']].dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Form quintiles based on SUE\n",
    "peadrets = temp.sort_values(by=['ncount', 'permno', 'rdq1']).drop_duplicates()\n",
    "\n",
    "# Ensure numeric type and handle categorical data\n",
    "def prepare_numeric_series(series):\n",
    "    # Convert to numeric, coercing errors to NaN\n",
    "    numeric_series = pd.to_numeric(series, errors='coerce')\n",
    "\n",
    "    # Remove any non-numeric or infinite values\n",
    "    return numeric_series[~numeric_series.isin([np.inf, -np.inf])].dropna()\n",
    "\n",
    "# Safely create quintiles\n",
    "def safe_quintile(series, q=5):\n",
    "    # Reset index to avoid duplicate label issues\n",
    "    series_reset = series.reset_index(drop=True)\n",
    "    \n",
    "    # Prepare numeric series\n",
    "    numeric_data = prepare_numeric_series(series_reset)\n",
    "    \n",
    "    # Check if we have enough unique values\n",
    "    if len(numeric_data.unique()) < q:\n",
    "        # Not enough unique values, use simple binning\n",
    "        return pd.cut(numeric_data, q, labels=False)\n",
    "    else:\n",
    "        # Use quantile-based binning\n",
    "        return pd.qcut(numeric_data, q=q, labels=False)\n",
    "\n",
    "# Apply quintile binning\n",
    "# Recalculate quintile binning properly for sue1-5\n",
    "peadrets['sue1'] = (safe_quintile(peadrets['sue1'], q=5) == 1).astype(int)  # Most negative SUE\n",
    "peadrets['sue2'] = (safe_quintile(peadrets['sue2'], q=5) == 2).astype(int)\n",
    "peadrets['sue3'] = (safe_quintile(peadrets['sue3'], q=5) == 3).astype(int)\n",
    "peadrets['sue4'] = (safe_quintile(peadrets['sue3'], q=5) == 4).astype(int)  # Using sue3 as a proxy for now\n",
    "peadrets['sue5'] = (safe_quintile(peadrets['sue3'], q=5) == 5).astype(int)  # Most positive SUE\n",
    "\n",
    "\n",
    "# Reset index\n",
    "peadrets = peadrets.reset_index()  # to make 'ncount' a regular column\n",
    "\n",
    "# Compute cumulative count\n",
    "peadrets['ncount'] = peadrets.groupby(['permno', 'rdq1']).cumcount()\n",
    "\n",
    "# Ensure 'sue1', 'sue2', 'sue3' in temp are converted to match peadrets\n",
    "temp['sue1'] = temp['sue1'].astype('float64')\n",
    "temp['sue2'] = temp['sue2'].astype('float64')\n",
    "temp['sue3'] = temp['sue3'].astype('int64')  # Since peadrets has int64 for sue3\n",
    "peadrets['permno'] = peadrets['permno'].astype('int64')\n",
    "peadrets['ncount'] = peadrets['ncount'].astype('int64')\n",
    "\n",
    "temp['permno'] = temp['permno'].astype('int64')\n",
    "temp['ncount'] = temp['ncount'].astype('int64')\n",
    "\n",
    "# Merge with original dataset\n",
    "peadrets = pd.merge(peadrets, temp[['permno', 'rdq1', 'ncount', 'exret']], on=['permno', 'rdq1', 'ncount'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['index', 'permno', 'date', 'prc', 'mcap', 'ret', 'mkt', 'exret_x',\n",
      "       'rdq1', 'leadrdq1', 'sue1', 'sue2', 'sue3', 'lpermno', 'lagmcap',\n",
      "       'ncount', 'sue4', 'sue5', 'exret_y'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(peadrets.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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Ll++LGrXri0ACK1WK1asWOH2MfqK/Tnc3Xr37i2SkpKK7e+tt95y+3sdNGiQyMvLc9tHbm6uGDRokMs+1Gq12/eDJ+bMmePR66e496fN2LFjBQARGxvrcp+ZM2cKf3//Yp9rvV4vzp49Kzu2uPeuNx+X8j08btw4l2OtXbu2OH78uMvzlPW97unzL4Qotn/b+3jNmjXF9kVERFQVMJOTiIiI3GrQoAGSk5Oxfft2bN68Gfv27cOZM2dw/fp1FBYWIjAwEDExMejQoQPuv/9+DB48GGq18xVxfvjhB/Tt2xczZ87EkSNHYDKZUKtWLdxxxx2YNGkSunTp4jIzrqI98cQTaN26NT799FP8+eefSE1NRWRkJO666y68+uqrskrYJaXT6TBjxgxMnDgRs2bNwtatW5GYmIjs7GwEBgaiQYMG6NixI+655x4MGTLEi49KbtmyZTh9+jTWrVuHnTt34vjx40hKSkJ2djaMRiNq1KiB1q1bY8CAARgzZgwiIiJc9hUdHY3NmzdjzZo1mD9/Pvbs2YNr164BAKKiotCtWzeMGDEC999/v/R6+f3339GnTx8UFBTgwQcfxMaNG9G9e3efPV5npk2bhk2bNmH37t04ffo0UlNTkZ6eDn9/f0RHR6Nr164YPXo0BgwY4LbCus0777yDu+++G19//TV27NiB5ORkhIaGom3bthg/fjxGjx5dbB9+fn5YtWoVfvnlF8ydOxdHjx5Feno6oqKicPvtt2PSpEnl/jx5w5NPPol7770X3333HdavX4/Tp08jPT0dBoMBderUQZs2bdC/f3/cf//9bl9r5W3OnDkYMGAAZs6cibi4OGRnZyM2NhbDhw/Ha6+95jabtjzf68eOHcOqVavw559/4vz580hOTkZ6ejqCgoLQvHlz3H333Zg4cSKioqLKdB4iIqLKQiVECVaYJyIiIrqF1K9fHxcvXsTYsWMxd+7cih4OERERERG5wMJDREREREREREREVKUxyElERERERERERERVGoOcREREREREREREVKUxyElERERERERERERVGoOcREREREREREREVKWxujoRERERERERERFVaczkJCIiIiIiIiIioipNW9EDqM6sViuuXLmCoKAgqFSqih4OERERERERERFRlSKEQFZWFqKjo6FWu87XZJDTh65cuYKYmJiKHgYREREREREREVGVdunSJdStW9fldgY5fSgoKAhA0S8hODi4gkdDRERERERERERUtWRmZiImJkaKs7nCIKcP2aaoBwcHM8hJRERERERERERUSsUtBcnCQ0RERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREREREREVRqDnERERERERERERFSlMchJREREREQVIilpDxITd0IIUdFDISIioipOW9EDICIiIiKiW8+6dS9iz57pAIAOHZ7C0KHfVfCIiIiIqCpjJicREREREZWrgoIs7Nv3pXT/0KFZyM6+VoEjIiIioqqOQU4iIiIiIipXaWlnYLUW2rUIXLt2pKKGQ0RERNUAg5xERERERFSu0tJOO7QlJ/9VASMhIiKi6oJBTiIiIiIiKpGCgiwkJu5EYWFuqY5PSzvj0MYgJxEREZUFCw8REREREZHHMjOTMGtWZ2RnX0NgYC2MGrUEMTE9StQHg5xERETkbczkJCIiIiIij23e/C+pSFB29jX8/PM9uHr1UIn6cDZdPTX1FCwWk1fGSERERLceBjmJiIiIiMgjJlMOTpxYLGsrKMjEvHkDkJJy3KM+hBBOMzmt1kKkpjoGP4mIiIg8wSAnERERERF55OTJ31FYmOPQnpeXhnnz+iEt7WyxfWRnX4PJlO10G6esExERUWkxyElERERERB45evRHl9uys6/hp5/uQnr6Rbd9OJuqbsMgJxEREZUWg5xERERERFSsjIxLiI/fLGsLDKwlu5+ZeQnz5vVDVtZVl/04m6puk5LCICcRERGVDoOcRERERERUrL/+mgdASPcNhhA8/fRh1K7dQbbfjRvnMH/+AJdFhNytu8lMTiIiIiotBjmJiIiIiMgtIYTDVPVWrUYhMLAWHnlkHSIjW8m2paQcw7FjC532deOG60zOrKwryM1NK/uAiYiI6JbDICcREREREbl1+fI+h2nmbduOBQD4+0fg0Uc3ICyskWx7YuIOp325m64OACkpcWUYKREREd2qGOQkIiIiIiK3lFmc4eGNERPTQ7ofFFQbnTpNlO1z+fI+h34slkLcvHlB1qbRGGT3OWWdiIiISoNBTiIiIiIicslsLsCxY7/K2m677TGoVCpZW506XWT3U1KOobAwV9aWnh4Pq9Usa2vc+G7Z/coU5Lx8eT9WrnwG69e/jOzsaxU9HCIiInJDW9EDICIiIiKiyuvMmRXIz78pa2vb9lGH/WrX7gCVSg0hrAAAISy4evUw6tXrKe2jnKru7x+JevXuwOnTy6W2yhDktFhM2Lr1Hezc+aH0eFJS4vDII2sreGRERETkCjM5iYiIiIjIJeVU9fr1+yA0tL7Dfnp9AGrWbC1rU05ZV1ZWr1GjKaKibpO1Xb9+HFarpQwjLpvk5DjMmtUFf/75gRTgBIDz59chPf2iz89/4sQSfPttO3z2WSz++mu+z89HRERUXTDISURERERETmVnJ+Ps2TWyNlvBIWeiozvL7l+5Ig9yKjM5a9Ro5hDkLCzMdVi3szxYrRbs3PkxZs3qhOTko073OXdujdN2bzCZsrF8+RNYtOgBJCcfRUZGIv74Y3yxhZqIiIioCIOcRERERETk1LFjCyDE31mVOp0/WrS43+X+ynU5lZmcN24og5xNERgYhYCAmrL28p6yfvPmBfz4Yx9s3PgKLBaTy/18FeS8cuUAvvuuAw4f/l7WbrWasWfP5z45JxERUXXDICcRERERETmlnKreosUIGAxBLvdXBjlv3ryA3NxU6b6z6eoAHLI5yyvIKYTAoUOz8e23bZGY+KfDdqMxTHb/woVNMJsLvHh+K/788yN8/3133Lhx1uk+R47MQV7eDa+dk4iIqLpikJOIiIiIiBwkJ8fh2rUjsjZ3U9UBIDKyFbRaP1nblSsHAAAFBVnIzr4q2xYR0QwAULOmPMiZkuL7IGd29jUsWDAUK1Y8CZMpW7FVhR49XsbEiX8B+LuKfGFhDhITd3jl/Hl5NzFvXn9s2vSaQ8V5e2ZzHg4c+M4r5yQiIqrOGOQkIiIiIiIH58+vl90PDq6L+vXvdHuMRqND7drtZW22KeuOmYoqhIU1AlD+mZwnTizGjBmtcfbsKodtoaENMG7cNvTv/18EB9dFnTrydUaVa5SW1rp1kxEfv9mhPTq6Mxo1ulvWtm/fl26n0RMRERGDnERERERE5IQym7JRo4FQqzXFHhcd7XxdTuVU9dDQ+tBqDQCAqKg2sm03b15wkl1ZdoWFufj990ewaNFI5OWlOWzv0OFJPPPMUcTG3i61NW58j2wfb6zLKYTAmTMrFa0q9Or1OiZM2Im+fd+XbcnOvopjx34t83mJiIiqMwY5iYiIiIjIQXJynOy+MtvSFWfFh4QQDlXCbVPVASAysiVUKvlHk5SUYyUZrkfWr38JcXE/O7QHBERh9OgVGDp0psOao02aDJLdT009ifT0hDKNIzX1lEOQ9ZFH1uKuu96HRqNDdHRHxMb2lm3fvXs6hBBlOi8REVF1xiAnERERERHJWK1mXL9+QtamzLZ0RRnkzM29joyMi0hLk2dyhoc3lX7Wao2oUaOZbLsvpqyfO7fWoa1Fi/vx7LPH0LTpEKfHREd3gr9/hKytrFPWlUWOgoLqoGHD/rK27t1fkN1PTj6KhIQtZTovERFRdcYgJxERERERyaSlnYXFIq8iXrOmZ0HOsLCG8PMLl7VdvrzfIZPTVlndpjzW5czJSZHdv/vuTzFy5CKHIKY9lUrtsEZmWaesX7okD3LGxt4OlUola2vadAjCwxvL2nbvnl6m8xIREVVnDHISEREREZFMSop8qnpQUDT8/Wt4dKxKpUJ0tLxYz+XLe91OVwd8H+QsLMxDYWGOrK1Jk0EOwUVnlOtyxsdvgtlc4GLv4ikzOWNiejnso1Kp0a3bZFnb2bOrcP36yVKfl4iIqDpjkJOIiIiIyAkhBOLifsHq1ZNw6tSyW2o9RGWA0dP1OG2UU9bPnFkBkylL1uZJJqc3n3NnhYbcZXDaa9z4bgB/B0MLC3Nx8eL2Uo0jK+sKbt68IGurV88xyAkAbduOdciK3bPns1Kdl4iIqLpjkJOIiIiIyIlduz7G77+Pwf79X2Phwvvw/ffdHTLwqitlJqenU9VtlEFOZRanVuuH4OC6sjZlkLOgIAOZmUklOq87ubmpsvsqlQZGY6hHx/r7Rzg8ptJOWVe+hgyGYNSs2drpvnp9ADp2fEbW9tdfPyEn53qpzk1ERFSdVZsg59dff4369evDaDSia9eu2Ldvn9v9Fy1ahObNm8NoNKJNmzZYvXq1bPu4ceOgUqlkt4EDB/ryIRARERFRJZGUtAebNr0ua7t8eS/mzLkdCxfe5xC0q27KmsmpnK6uVKNGE4dq6sHBMTAYQtyOoyyUgUF//xoOY3BHOWXdW0HOmJgeUKs1Lvfv0uU5qNU66b7ZnI+9e78o1bmJiIiqs2oR5Fy4cCFeeOEFTJ06FYcOHULbtm1x9913IyUlxen+u3btwujRo/H444/j8OHDGD58OIYPH45jx47J9hs4cCCuXr0q3RYsWFAeD4eIiIiIKlB+fgaWLHkYQlicbj91ahlmzGiF1asnITfXcQp0VVdQkIn09ARZW0kzOQMDoxASEutyu3KqOlC0lqeygrs3g5zKTE5Pp6rbNGkiD3Kmpp7CzZvxJR6HMshZr97tbvcPCopGmzajZW07dryHVaueRWFhbonPT0REVF1ViyDn9OnT8eSTT2L8+PFo2bIlvv32W/j7++OHH35wuv/nn3+OgQMH4uWXX0aLFi3w7rvvokOHDvjqq69k+xkMBtSqVUu6hYWFlcfDISIiIqIKIoTA6tXPIj3dffDKajVj//6vMXt212oXaEpJkX/xr1JpEBHRvMT91KnjOpuzRo1mTttr1pRnjKakVJ4gZ3R0J4djSprNWVCQieTko7I2V+tx2uvW7QWHtgMHvsHMmR1x9eqhEo2BiIiouqryQU6TyYSDBw+iX79+UptarUa/fv2we/dup8fs3r1btj8A3H333Q77b926FTVr1kSzZs0wceJEpKVVv2/qiYiIiOhvf/01D3Fxv8jaYmJ6YuDAL+Dn51hd/ObN8zh7drVDe1WWnCxfjzMiojm0WkOJ+4mO7uJym7NMTsBxWvy1a0ed7lcaubnK6eqRJTpepVKjUaO7ZW0lDXImJe2BEFbpvlqtK3ZqPwDUqtXWaaAzNfUUZs/uij///BBWq/PMYyIioltFlQ9ypqamwmKxICoqStYeFRWFa9euOT3m2rVrxe4/cOBA/PTTT9i0aRM++ugjbNu2Dffccw8sFtd/PBQUFCAzM1N2IyIiIqKq4caNc1i9+jlZm8EQghEjfkbXrv+Hf/zjPHr2fA1arVG2z7VrR8pxlL7nuB5nyaaq2ygL9dhzFeSsWbOV7H5xGbUlUdZMTgBo0mSQ7H58/GaYzfkeH3/x4g7Z/ejoTtDp/Dw6dsCAaRgy5DvodP6ydqvVjE2bpuDHH+90eIxERES3kiof5PSVhx56CPfeey/atGmD4cOHY+XKldi/fz+2bt3q8pj//Oc/CAkJkW4xMTHlN2AiIiIiKjWLxYQlS0bDZMqWtQ8dOguhoUVrSxqNIejX7z/o0uUfsn28uW5kZeBYWb1kRYdsoqM7uizs4yrIGRBQU3bfbM4vURDRHW8EORs1GgBAJd0vLMzFxYvbPT7+0qWSrcdpT6VSoWPHp/D004cRHd3JYXti4g6sWvWsx/0RERFVN1U+yBkREQGNRoPk5GRZe3JyMmrVquX0mFq1apVofwBo2LAhIiIicO7cOZf7TJkyBRkZGdLt0qVLJXgkRERERFRRNm9+E1euHJC1tW//OFq1GumwrzKzURkUrMqEEF7L5NTrAxER0cKh3d8/An5+4U6PMRod18DPy7tZqvMrOU5XL3mQ098/wiFD9exZz6asWywmJCXtlbV5sh6nUo0aTTFhwi7cfvsbDkHkkgRciYiIqpsqH+TU6/Xo2LEjNm3aJLVZrVZs2rQJ3bt3d3pM9+7dZfsDwIYNG1zuDwBJSUlIS0tD7dq1Xe5jMBgQHBwsuxERERFR5Xbhwkbs2vVfWVuNGs0wcODnTvdXrhuZnp6A/PwMn42vPGVmJqGgQP5YlI+3JJxNWXeVxQkARmOoQ1t+vreCnMpMzpKtyWnTuLG8yvr582s9Ou7q1cMwm/NkbTExPUo1Bo1Gh75938PIkYtl7bm517k2JxER3bKqfJATAF544QXMmjULP/74I06ePImJEyciJycH48ePBwA89thjmDJlirT/P//5T6xduxaffPIJTp06hbfffhsHDhzApEmTAADZ2dl4+eWXsWfPHiQkJGDTpk0YNmwYGjdujLvvvtvpGIiIiIio6snJuY6lSx+VtWk0etx//wLo9QFOj4mIaA61WitrU1Ykr6qUWZwGQwiCg0u/BJPzIKfzyupAUfBOrw+UtXkvk7Ps09UBoHHjgbL7qamnkJmZVOxxiYny9TgjI1vC39+xmFVJ1K3bTXZfCCvX5SQioltWtQhyPvjgg5g2bRreeusttGvXDkeOHMHatWul4kKJiYm4evWqtH+PHj3wyy+/YObMmWjbti0WL16MZcuWoXXr1gAAjUaDv/76C/feey+aNm2Kxx9/HB07dsSOHTtgMJS8siQRERERVT5CCPzxx3hkZ8uLVd5114eoXbu9y+M0Gj0iIprL2qrLlHXl44iKagOVSuVi7+KVNJMTcJyy7o1MTiGE14Kc0dGdHDJOL1zY5HxnO4mJ8vU4Y2JKPlVdKSAgEvZrhAJATk6y852JiIiqOW3xu1QNkyZNkjIxlZwVCxo5ciRGjnRcYwkA/Pz8sG7dOm8Oj4iIiIjKUULCVmzf/i70+iD07j3VadBy374vcfbsKllb48YD0a3bP4vtv2bNNrLszepSfEj5OGrWLN16nPbHazQGWCwFUltxQU4/vzBkZv69tr03MjkLCjJgtZplbUUBwpJTqzVo0KAvTp78XWq7cGED2rUb6/IYIYRDkDM21vOiQ67HooW/f4RsvdHs7GtlWmKAiIioqqoWmZxERERERDYmUw4WLLgX8fGbcfr0H/j++27Yt+9rCCGkfa5dO4oNG16WHRcQEIVhw+a6rAhuTxlEqq6ZnGUNcmo0OrRoMUK6r9MFoH79O90e44tMTmdTuEubyQkADRr0k92/cGGj7PWllJZ2Gnl5abK20hQdciYwMEp2PzubmZxERHRrqjaZnEREREREAHD16iGYTFnSfYvFhDVrJuHixa0YOnQ2NBodlix5CBaLSXbc8OE/OgSMXFEG/5KT4yCEKNPU7opmsZiQmnpK1uaNjMB77vkS/v6RyM6+gm7dJsPPz7GCuj3ldm9kciqDnFqtH3Q6/1L317ChPMiZk5OM69ePo2bN1k73V2ZxBgXVQUhIbKnPby8wsJYsq1i5/AIREdGtgkFOIiIiIqpWMjISnbafOLEYV68eQlRUW4dgXrduL6BxY88LTCqDfwUFGcjMvISQkHolH3AlkZp6ymFKt6ugXUn4+9fAPfc4r1TvjC8yOXNyrsvul3aquk14eGOEhNSTvdbOn9/gJsgpLzpUr14vrwXEAwLkgXmuyUlERLcqTlcnIiIiomrFfj1HpZs3L+DUqaWytlq12uOuuz4o0TmCg+vCYAiRtVX1dTmV4w8JiYXRGOJib98pj+nqZZmqDgAqlQoNG/aXtcXHb3S5vzKTs169sq/HacMgJxERUREGOYmIiIioWsnIcB3kVNLp/HH//Qug1RpKdA6VSuWQzZmcXLXX5VSOPyqqbOtxllZ5TFcva5ATcJyynpCwzWEJBADIyrqCmzcvyNq8tR4nUDRd3R6nqxMR0a2KQU4iIiIiqlYyM+XT1du3fxx163Z3uu8993yJiIhmpTqPcl3OlJSqncmpHH/NmhVTods3mZzy6ereCHI2aNBXdr+wMAdJSXsc9ktM3Cm7bzAEe2UZABsWHiIiIirCICcRERERVSvKTM6YmB4YN24bevSQV1Nv3fohtGs3vtTncczkrNpBzlsrk7Nsa3ICQEBATdSq1U7WduGC45T1c+dWy+7HxPSAWq0p8/ltmMlJRERUhEFOIiIiIqpWlGtyBgfHQKPRoX///2Ls2K1o3/5x3HXXhxg+/KcyFX9RBgFTU0/DbC4odX8VKS/vBrKyLsvavFFZvTSqwpqcNg0ayKesK4OcN2/G46+/5sva6tW7wyvntlGuyZmbm+pQQIqIiOhWwCAnEREREVUbJlMO8vJuyNpCQmKkn+vX7417752NXr1ehUajK9O5lFOOhbAgNfVkmfqsKMosTo1Gj/DwJhUyFmUmZ35+epn79MV0dcBxXc7Ll/chPz9Dur9jx/uygKNWa0S7duO8cm4b5XR1QDgEdYmIiG4FDHISERERUbXhrLJ6cHCMkz3LzmAIRmhoA1lbVS0+pJxqHxHRosxB4NJSZnIWFuY6LehTEr6Yrg4AsbG3Q6PRS/eFsCAhYSsA4MaN8zhyZK5s/06dJiIoqLZXzm3j7x8JlUr+sY5T1omI6FbEICcRERERVRvK9Tj9/MKh1wf47HzKKevlvS6n2VyATZtex6+/Dsfp0ytK3U9KinI9zoqZqg44ZnICZV+X01fT1XU6f8TE9JS12aas79jxHoSwSO1arR969nzVK+e1p1ZrHB4Piw8REdGtiEFOIiIiIqo2nK3H6UvKCuTKYKGvrVz5NP788z84ffoPLFx4H5KS9paqH2VwVlk5vjwpMzmBsq3LabEUOkx591aQE3Ccsh4fvxFpaWdx9OhPsvbOnZ9zMrXcO1h8iIiIiEFOIiIiIqpGMjISZfdDQur59HwVmcmZmLgTR4/+KN0XwoLNm18vcT9CWJGSckzWVpGZnBqNDjqdPPu2LJmceXlpDm0BAd6Zrg4ADRv2l91PTT2FVasmQgir1KbT+aNnz5e9dk4lZfGhnBxmchIR0a2HQU4iIiIiqjaU09V9ncmpDAZmZ18tl6IvVqsFa9b8n0N7fPxmxMdvLlFf16+fQGFhjqxNGbwtb47Fh0of5HT2+/DzCy91f0q1a3eA0Rgqa4uP3yS736XL/yEgoKbXzqmkzBDldHUiIroVMchJRERERNWGcrq6fWV1XwgPbwyNxiBrK4/iQ4cP/4Br1w473bZ5878ghPCoHyGsWL16kqzN3z8CgYHeLY5TUsop62XJ5FQGOY3GMKjV2lL3p6RWa9CgQV+X2/X6QPTo8ZLXzudMQIB8unpODqerExHRrYdBTiIiIiKqNpTT1X2dyalWa1GzZitZm6+nrOfl3XQ7LT0paTfOnl3tUV97936Jixe3ydratHkEKpWqTGMsK29mcubkXJfd9+Z6nDYNGvRzua1Ll3/45Jz2mMlJRETEICcRERERVRNCCCeZnL5dkxNwLNLjrPhQTs515OXd8Mr5tm5922l2or0tW96UrQnpTFraGWzaNEXWFhISizvv/LdXxlkWvszk9OZ6nDaNGvV32q7XB6FHjxe9fj6lyl546OTJpViwYCg2bpwCs7mgoodDRETVFIOcRERERFQt5OffRGFhrqzN19PVAcd1Oe0zOYUQ2LDhVUybFoVPPonG4cM/lOlcKSnHsH//17K25s3vw8CBn8narl07jJMnf3fZj9VqwbJl42A258nahw2bA4MhqExj9AZfrsnpi6zKsLBGCAmJdWjv1u15r67/6UplLjyUknIMixY9gDNnVmLnzg+xffu7FT0kIiKqphjkJCIiIqJqQTlVHVAhKKiOz8+rzOS8fv04rFYLAGDbtnewa9d/AQhYLAVYu/Z5FBbmOemleEIIrF37Twhhkdo0GgMGDPgEbdqMQUREc9n+W7a8JY1DaffuT5CUtFvW1rnzJDRocGepxuZtBkOo7H7Zgpzy6ep+ft4PcqpUKjRsKJ+ybjCEoFu3yV4/lzPK6eq5uWmwWArL5dzFOX58kSyrOCFhSwWOhoiIqjMGOYmIiIioWlBWVg8Kqg2NRufz8yozOQsLc3Hz5gUcOjQb27a9I9tmMmWVuPq5zcmTvzsc27PnKwgLawC1WoM+feTTzFNTTyIu7heHflJSjmPLljdlbeHhjdGv34elGpcvKDM5K/t0dQBo336C7P7tt7/u8Dh8RTldHRAOwd2KcunSTtn9goKsChoJERFVdwxyEhEREVG1oFyP09dFh2wCA6Pg7y8PnO3c+V+sXPmM0/1Pn15e4nMUFuZi/foXZG3BwTHo1es16X7LlvejVq12sn22bXtbltFnsRRi2bKxsFhMdnupMGzYXOj1ASUel68o1+Ss7NPVASAmpgdGjVqC1q0fwsCBX6BHj5d9ch5n/PxqQKWSf7SrDMWHrFYzkpL2yNoKC3MqaDRERFTdaSt6AERERERE3qDM5CyP9ThtoqJuQ3z8Jun+4cOzXe579uxKCCE8rmAuhMCaNf9wmI4/YMA06HT+0n2VSo0773wXCxYMldpu3ryABQuGQKVSIzv7GjIzLztk+HXv/gLq1evp0VjKi3czOX1fXd2mRYsRaNFihM/6d0Wt1iAgoKas4FBlKD6UnPyXQ1DTZMquoNEQEVF1x0xOIiIioltEoVVgdWIWvj1+A+suZcNsFRU9JK/KzJQHAYODfV9Z3Ua5Lqc7WVlXcPXqIY/337XrYxw+/L2sLTa2N1q2HOmwb5Mmg1G3bjdZ2/nz63Hu3Fpcu3bEIeAXEdECffu+5/FYyotvMzl9M129olXG4kOJiTsd2hjkJCIiX2GQk4iIiOgWcTQ1H3+lFSDdZMXh1Hwcu1FQ0UPyqorO5HTlttseQXh4Y1mbp1PWT5xYgo0bX5W1abV+GDToK6eZoCqVCnfe6VnQUqXSYPjwH6HVGj3avzx5K5NTCFFu09UrmrL4UGWYrq5cjxMoWnrBvhARERGRtzDISURERHSLiM8yye4nKO5XdRW1JifgOsjZsGE/3Hvv92ja9F5Z+5kzK4rt8/LlfVi69BFFqwojRsxHzZqtXR7XoEFfNG06xG3fGo0BgwZ9hTp1Ohc7joqgzOQsLMwpVbXwwsJcmM35srbqG+SUFx+qDNPVnQU5gaLfCxERkbdxTU4iIiKiW8T1fIvb+1WZ1WpBZmaSrK08MzkjI1tCpdJAiL+f06io2zBq1BJoNHo0azYUe/ZMl7Zdu3YYmZlJCA6u67S/9PSLWLDgXocAXb9+HxW75qNKpcL99/+KXbum4caNM/D3j0RgYC3ZLSysEQyGoDI8Yt9yVpU8P/8mAgJqlqgfZxXGfVVdvaJVtunqGRmJDu9JG5MpG3p9YDmPiIiIqjsGOYmIiIhuAQUWKzJN8imiN/ItMFsFtGrPCuBUZjk5ybBazbK2kJDyW5NTp/NDmzaj8ddf86VzP/zwahgMwQCAmJieMBpDkZ+fLh1z+vQKdO480aGv/PwMLFgwxCFI1aHDk+jR4yWPxqPXB6BPn6mlfDQVT5nJCRRNWS95kFM+VV2t1kGvr7zB3bKobJmcztbjtOG6nERE5Aucrk5ERER0C0h1krUpAKRVk2xO5XqcarWuxAGxsrr33u8xaNAM9Ov3EZ5++giCg+tI2zQaHZo0GSTb39mUdavVjMWLH0RKyjFZe8OG/TBo0NceV2Sv6rRaA7RaP1lbaYoPOVuPs7o+h5Utk9PVVHWAQU4iIvINBjmJiIiIbgHX85wHM6/nm522VzWO63HWhUpVvn/qajR6dO48ET17vuJ0unXTpkNl9+PjNzsEe3bv/hTnz6+TtUVGtsTIkYug0ei8P+hKzBvFh3Jy5NPVq+t6nEDlKzzkPsiZU44jISKiWwWDnERERES3gJQ858HMVBfBz6omIyNRdr88p6p7qnHjgVCr/14tymIpwPnzG6T7N26cw9atb8mO8fePxOjRK2E0hpbXMCsN5ZR1b2RyVtf1OAHH6ep5eWmlKtbkDQUFWUhO/svldmZyEhGRLzDISURERHQLcJWxWV0yOZXT1cuz6JCnjMZQxMbeIWuzTVkXQmDlyqcVhYZUGDVqCcLCGpTjKCsPb2RyOpuuXl0pp6sDQE5OSgWMBEhK2gMhrC63M8hJRES+wCAnERERUTUnhHCZselqGntV4zhdvfIFOQHHKetnzqyE1WrBkSNzEB+/WbatS5dJiI29vTyHV6l4J5NTPl3dz6/6Bjn9/WtApdLI2iqq+JC7qeoAUFjI6epEROR9DHISERERVXM5ZoE8i3C6LbPQinyL64yrqkI5Xb2qBDlzc6/j9OnlWL/+RVl7SEg99O37fnkOrdLxRSZndZ6urlKpHYptVVTxoeKCnMzkJCIiX2CQk4iIiKiau+5iPU6b6rAupzKTszKuyQkA4eGNEBnZUtb2++9jkJ+fLmsbPPhbGAxB5TiyyscXa3JW5+nqQOUoPmS1mpGUtEfWplbLi2YxyElERL7AICcRERFRNeeq6JBNVV+X02wucJiWWxnX5LRRZnOazXmy+23aPIwmTe4pzyFVSr6Yrl79g5zy4kMVMV09OTnOIYgZE9Nddp9BTiIi8gUGOYmIiIiqudR895maVX1dzqysyw5tlXW6OgA0a3avy21+fjVw992fld9gKjHfFB6qvtPVAcfiQxUxXV05VT08vDHCwhrJ2kwmrslJRETexyAnERERUTWnDGIGaFXy7VU8k1NZWV2vD4TRGFoxg/FAnTpdXWYUDhz4WbVeN7IkyprJabVakJd3Q9bGTE7fUwY5Y2J6Qq8PlLUxk5OIiHyBQU4iIiKiaswqBFIVQcwWYQbZ/et5FgjhvDBRVeCssrpKpXKxd8VTqzVo0mSwQ3ujRnejTZsxFTCiyqmsmZz5+ekQQl5Uq7oHOStDJmdiomOQU6cLkLUVFjLISURE3scgJxEREVE1ll5ghVkRv2ypCHLmWwSyzVW3wroyk7Myr8dp06zZMNl9nS4AQ4Z8W6mDs+WtrJmcyvU4geof5KzowkMZGYkOXzrUq8dMTiIiKh8MchIRERFVY8qp6P5aFWr7a6FT/BVYldflzMhIlN0PDq6cldXtNWt2L+rX7wMAUKu1GDp0JkJD61fomCobZSanyZQNi6XQ4+OV63Hq9UHQag0u9q4eKnq6ujKL02gMQ0REcydBTq7JSURE3qet6AEQERERke8og5eRRi1UKhUijVpcyTXb7WdGw2B9eQ/PK5SZY1Uhk1Ot1uCxxzbh8uV9CAysjdDQ2IoeUqWjzOQEiqage7pmqWPRoeqdxQk4TlfPz78Js7mg3IK7jutx9oBKpYZeL5+uzkxOIiLyBWZyEhEREVVjykzOSD+N7N+/96u6mZzO1uSsClQqNerW7cYApwvKTE6gKMjpqZwc+XT1WyHIqczkBICcnJRyO7+zokMAOF2diIjKBYOcRERERNWYQyanX9FEngijVrFf1a2wrpyuXhUyOal4Wq0RWq1R1laSdTmVmZy3QtV6P78wqNXy93Z5FR8qKMhCcvJfsrZ69ZwHOQsLOV2diIi8j0FOIiIiomqq0Cpws0A5Xd15JmdavgXWKlhh3WTKdsjuCwnxzpqcQgicSS/Atis5uJzj+VqQ5D3KKeslqbB+K05XV6nUCAioKWsrr+JD164dkVWzV6t1iI7uDICZnEREVD4Y5CQiIiKqptLyLVCGLW0ZnDUVmZxmUVSJvapRVlYHgODgumXv12TBr+cy8Xt8FnYn5+GXsxm4lM1AZ3lTTlkvWSanfLq6n1/1D3ICFVd8KCPjoux+eHhj6HR+AACdjmtyEhGR7zHISURERFRNKaegh+rV0GtUAAB/nRr+WpVse0q+b6asH07Nww+nbmJFQhZMltJli+bmpmHlymfwyy9DcPbsaqlduR6nn18N6HT+pR6rEAJHUvPx/cl0XLQLaloEsPZSNizWqpftWpV5M5PzVpiuDjgWHyqv6erKLxzsl41QZnKazfmwWqvuOsBERFQ5MchJREREVE0piwnZ1uOU7iuyOVPzvB90SM41Y92lHKTkWXD8ZgHWJ5Uug2vt2n/i4MHvcPbsKvzyy2Bs3foOhBBO1uMs/VT1TJMFv53PxNpL2TA5CWam5Vuw/3peqfunkjMaQ2X3y7Im560wXR2oyExO+XsxOPjv96IyyAlwXU4iIvI+bfG7EBEREVFVpMzktK3HKd3308iyFZWV2L0hPssku3/iRgH6RAcgUOf5d+1CWHH69HJZ27Ztb+PGjbMOU9NLW3ToxI0CrLuUjYJiMjV3XstFizADQvQat/uRdyinq5csk/PWq64OVFwmZ2am6y8c9PoA5e4wmbJhMAT7fFxERHTrYCYnERERUTVVbCann7LCuvczOZWFj6wA/krLL1Ef6ekJMJmyHNrj4n7Grl0fy9qCg0se5EzKLsSKi1lOA5xNQ/Sy+4VWYGMSM9DKi3K6etkyOW+N6eqBgfIgZ3kVHnKXVe0sk5PrchIRkbcxyElERERUDeWZrcgulBcScsjkVNy/WWBBoZfXnLxR4Bg4PZKaX6JK7snJf7ncZl/NGShdkHNfSp5DgaYgnRojGwZjRMNgtI8wyradzTDhXIYJ5HulDXKazfkOQbRbJZOz4qarK9fk/DvIqdHooVbrZNsZ5CQiIm9jkJOIiIioGlJmcWpUQJgiqBmhWJNToGjdSW9yVrE9s9CK85meBwmvXTvq8b4lXZMz3+w4lhahejzePBSN/pfF2bu2v0ORpg1J2V4PCJOj0k5Xz81Nc2i7VYKcFTFdPT8/AwUFGbI25dIRymxOk4kZ0URE5F0MchIRERFVQ8r1OMMNGmhU8kCdXqNCqF7+56DyuLIotApkFToGOQHgcKrnU9aTk+VBziZNBrnM2Czpmpyn002wL/iuUQF3xwTCqP37eTFq1bgzWr6mYIbJit3Xckt0Liq50mZyKtfjVKnUDgHT6kqZyZmfnw6zuWRLRJRUZuYlhzblernKdTmZyUlERN7GICcRERFRNaRcX7Omn/N6kw7rcnoxk1O5Hqe9C5mFSHez3Z5yunqLFg/gySf3ITq6s2JPFcLDG5dojMduyoM/jYL1sgCnTetwA+oGyJ+rvSl5SPNBsSb6W+kzOeXrcfr51YBKdWt89FGuyQkAOTkpPj2ncj3OgIAoaLXyZR4cMzkZ5CQiIu+6Nf6nJyIiIrrFKCulR/o5rwauXJfTm5mc7oKcQNHanMUpKMjCzZvnZW21arVFYGAtjBu3FY2aj5Lam7Ye55DF5k6GyYJL2fLH2yrc4HRflUqFu2MCZX88WwSw/lIORAnWF6WSKX0mp7Lo0K0xVR0oes6U61/6uviQu6JDNsogZ2Ehp6sTEZF3MchJREREVM0IIZCqyOSMNJZ/JmdxmZpHb+TDXMy6likpcbL7KpUGkZEtAQBqrR+yWn8DXe9N0PVagyuN/utQbMmdEzcKZPcNGhUaBetd7F30XHWu6Sdru5hdiGu5zOb0FWUmZ0FBJqzW4l+jOTny6eq3UpBTpVI5qbDu2+JD7ooO2TCTk4iIfI1BTiIiIqJqJrPQigJF8DDCw0zO7EIrUvLMTrMThRC4WWDB6fQC7LqWiwPX89wW31FWVq+jmO6dZxY4k+6+AJGy6FBERDNpGuy5DBMyTFaoQ26DOrwTCgXw51XP1skUQuD4TXmQs0WoAVq1ysURRXrW8kegYjr7NS9mv5KcMpMTKFpjsjjKTM6AgEhvDalKKO/iQ5mZ8kxOZ2vm6nRck5OIiHzL+Vf6RERERFRlKdfjNGhUCNY5/247zKiBRgVZ8Z0fTqVDqwJqGDWIMGqhVRf1eT3fDGWi5LkMEx5qHOK075uKyuqNg/XQqFRIzC6U2g6l5qGliynigON6nFFRbaWfnU13P5qWj06RRkS4WIPUJiXPglRF1qq7cdjoNSrUDdTilF1w1lkFefIOZ8WC8vNvwt+/htvjHNfkvHUyOQHH4kO+z+Qs+XR1BjmJiMjbGOQkIiIiqmaO35AH/yKNGqhUzjMUNSoVahg1SFEERs0CSM6zIDnP/dTghKxCZJgsCNE7Zooqp6uHGTQINWhkQc6kHDOu55kR6aeFVQgkZBXi+I0C3CywoFW4waGyui3ImV5gQXxWIZQEgC1XcjCykfPAq40yizNYp0ZMgGd/Gisfa4bJe1P8SU6r9YNGo4fF8ndQ2ZPiQ8rq6rfSdHXAMZOzMq7JaTJxTU4iIvIuBjmJiIiIqpG0fDNOKqaAN3SzziQAtAozICXPs2neziTnmh0Cf4VWgUxF2meYQYMIowYBWhVyzH+nju66losQvQbHbhbI1tS8nGOCVZHJWatWUZDzSJrrokXnMwtxMcuE2CDnj9sqBE4ogpytwg0uA8FKIXp5Vmy6iZmcvqJSqWA0hsmmW3tSfOj69ROy+8HBdbw+tspMuSanL6erW60WZGYmydqcBTk5XZ2IiHyNa3ISERERVSO7k/Nk9/VqFTpEGN0e0ynSD/3qBKBugBZGjWeBPnvJTtakdFZ0KMyggUatwm015OM5mW7CnpQ8x6JBOQkwKyowR0XdBotV4C83QU4A2HI512XV88TsQodztQorfqq6TahBkclZTIElKhvllPXiMjkLC/OQmnpK1larVjtvD6tSCwioKbuvnL7vTTk5ybBa5dcAz6qrM8hJRETexUxOIiIiomoivcCC44qK4R0jjTBq3X+vrVGr0KmmHzrV9IMQArlmgdR8M1LzLUjLt8BsFahh1CDST4uaflrsTc7F/ut/BxmdTWm/qQj8BWhV0P8vgNouwugQjHXGminPxvP3j0BgYG2cTjch1ywPYHaMNOKg3Ziu5Zlx4mYBWoU7BniVz1FNP02xa3jaU2Zy5lkECixWGDTMH/AFZfGh4jI5U1LiIIT960+FqKjbfDCyystoDJXdLyjI8Nm5lFPVNRq900JPXJOTiIh8jUFOIiIiompid3Iu7EN/OjXQOdKvRH2oVCoE6FQI0OkRG+R8nyh/+Z+QKbmOmZzKIGeYXfZjiF6DRsE6nM90XFPTNu5CKyAyj8vPG9UWKpUKhxUFh+oGaNG3TgDiMwtlFd23Xc1FM0XF9EKrwGnFdP6SZHHaxq+UYbKiph+DnL5Q0kzOq1cPy+7XqNHUIcBW3RkM8jVpPalIX1rKIGdwcAxUKsf3AtfkJCIiX+NfYkRERETVQIbJgjhFhmL7CD/4u6iqXhY1FVmPmYVW5Jnl07+VldXDFFO8e9Xyh13sEQFaFbrW9MPjzUPx8P+qtTsLct4ssOBitjw42j7CCI1KhT7R/vJxmaw4eF2eMXouwwSTVZ4F6klVdXtatQqBiuxYFh/ynZJmcl67dkR2v3bt9t4eUqVnNCqDnOWXyelsqjoA6PVck5OIiHyLmZxERERE1cDe5DzYx+60KqBLzZJlcXqqhlEDjQqw2J0vOc+M+naFfpSZnOGKIGftAB3GNQtFfKYJEUYtGgTroLYr/NMyzIDDiunqAeGtcESRxWnUqNAstChI2SREj7oBWiTl/J1Zuis5DyF6DQSKCg4ps0DrB+kQpHPMzCxOiEGNbLvAbnoBiw/5ijLIWVwm57Vr8kzOWrVuxSBnqOx+QUEGhBAeF9cqiYyMS7L7roOcnK5ORES+xSAnERERURWXVWjBUUUhnrYRRgT6IIsTADQqFSKNWlyzKziUnOs+yKnM5ASKMkKVWaE23WqYcTj3oqztAprg5g3542wT/vd0dJVKhb51AvDTmb+z1gosAssSslw+lpJOVbcJ1Wtw2S6YykxO31FOV3eXyWm1WpCc/Jes7VYrOgQ4Tle3Ws0wm/Og0/m7OKL0MjM9zeRUFh7idHUiIvIuTlcnIiIiquL2JefJsio1KqCrj7I4baL85UHLFLviQ2arQKaiermyInlx8m/Kp6pDpcVlVUPkKQoOtVNUjo8O0KFFqB6e0KqAph7uq6QsPpRhYianr5Rkunpa2mmYzfIlCm7NTM4QhzZfrcvpbE1OZ3Q6TlcnIiLfYpCTiIiIqArLKbQ6TMFuE25EsJPiON4UpcjATLbL6kx3ktUYZijZn53Xrh2V3VcFNoVKI8+6jAnUoobRMRO0d3QAtB7Mym1Tw1jqiughiqBtegEzOX2lJIWHlEWHgoLqOK30Xd0pMzkB363L6fmanJyuTkREvsXp6kRERERV2P6UPNgnN6oBdIvybRYn4Fh8KC3fgkKrgE6tcpiqHqBVlTiYqJxyrApu6bBP+xrOH2eoQYP7Gwbjz2u5yC60Qq0C1CoV1Ciaaq9RAzEBOvSsXfqpu84yOX215uGtriSZnMr1OG/FokMAoNHooNP5o7AwV2orKPB+kLOwMBe5uamyNk+DnBaLCRZLITQandfHRUREtyYGOYmIiIiqqORcMw6myqfmtgo3lHhqeGkog5wCQGqeGbUDdMVWVvdEcrIikzOkley+n1bldqp5g2A9GgSXbiq6J0IVmbImq0C+RcDPkxRSKpGSZHKy6NDfDIYQWZDTF5mcmZlJDm0hIc6nqyuDnEDRupwaTai3h0VERLcoTlcnIiIiqoKu55nx6/kM2C99qQLQPcr7hUWc0WtUDhXTk/+3LqcnRYfcsVotSEmJk7Wpg+VBzjbhRqngUEUI1quhPLuzafpUdspMzoKCDFitjs+1EMJhuvqtHORUrsvpizU5lVPVjcYwp8FMANDrAxzaOGWdiIi8iUFOIiIioiomLd+MX89lOBThaVPDgHCj77M4baL8lEHOonU5yxrkvHnzvCwDDQBio9tJP2tVQAdFwaHyplapEKScsl7A4kO+oMzkBJxPvc7ISHSYyn6rTlcHAKMxVHbfF9PVPV2PE3AsPAQwyElERN7FICcRERFRFXKzwIIFZzORowhw1gvUoX9d5xlUvqKcsp6c650gp3I9zoCAmnigZSO0jzCiUbAO9zcMLpcp+cVRTlnPYCanTygzOQHnU9aVU9WNxjCEhMT6bFyVnbL4kC+mq5ckyKnR6KBRFA9jkJOIiLyJa3ISERERVRHpBRYsOJuBbLM8Y7BugBYPNAyGrpynb0f5y/+UvJ5vRqFVINNUtjU5lZXVo6LawqBR4+6Y8g3iFkdZfCjdxExOX9Dp/KFW62C1FkptzooPOU5Vb3dLF4KqiOnq7oKcQNG6nHl5BdJ9kynH62MiIqJbFzM5iYiIiKqADJMFC85lILNQHkiL9tdiZKNg6DXlH8yJUmRyFlqB+EwThGK/UENJK6s7BjkrI2U2aUYBMzl9QaVSOUxZdxawY9EhOWUmpy+mq2dmXpLdLz7IKZ+yzkxOIiLyJgY5iYiIiCo5IQT+iM9ChiJTsJafFqMaBcOgqZg/6QJ0agRq5ec+nW6S3ffXqmAs4fiU09Vr1aqcQU5lJqfy90Peo1xf0pPp6rfyepxAxazJGRzsvLK6jbIoEYOcRETkTQxyEhEREVVyyXkWXPnfepc2kUYNHmwcDKO2Yv+ci/KXZzOezZAHOUs6VT0/Px0ZGRfl54i6rXSD87EQJ2tyCqHMYyVvUK7LqZyunpubiszMJFkbMzl9uyanEKJU09XtFRZyujoREXkPg5xERERElVx8pjxwGKRTY3TjEPhVcIATcCw+ZLLKg3xlLTqkVusQEdG8dIPzsVBFJqdZwKEgFHmHcrq6MpNTuR6nVmtEREQzn4+rMvP1mpy5uakwm/NlbcUFOZUV1pnJSURE3lTxfxkTERERkVvxWYWy+01C9PDXVY4/45TrciqVtehQZGRLaDT6Eo+rPATq1FAuhZrOdTl9orhMTuVU9aio26BW39o1Vn29Jqcyi1Ol0iAoqLbbYzhdnYiIfKly/HVMRERERE6ZLAJJOfIgZ4NgXQWNxpGywrpSyTM55UHOyroeJ1BUEMfZlHXyPmWQU5nJyaJDjpRrcnp7urqy6FBwcJ1iA8sMchIRkS8xyElERERUiV3KLoT9DHA1gHqBlSfIGapXQ692Xdk9rISV1RMTd8juV9bK6jYsPlQ+HKuru5+uXqtWO18PqdJTTlf3dSZncUWHAGdBTq7JSURE3sMgJxEREVElFp8lX48zOkBbYdXUnVGpVKjp5zpbM0zveSZnenoC0tLOyNpiY3uXemzlQZnJmc5MTp9QZnJmZl6SijyZTDkOrxtmcjovPCSE94LwJS06BHBNTiIi8q1be6EaIiIiqvLMVoHUfAvyzFbkmq3IMwvkWYr+NQuBWn5aNArROwSjqoqELOVU9cq3PmWUvxZJOWaHdj+tqkTV38+f3yA/3q8Gateu3MGqUEWmakYBMzl9ITCwlux+UtIe7Nv3Jbp2/cf/ilX9ne6sUqkRFdWmnEdY+SinqwMCJlM2DIZgr/RfmiCnY3V1BjmJiMh7GOQkIiKiSien0Io8ixUBWjWMGhVUqr+nQ1usAldzzbiYXYiLWYW4klMIdwWt/0IBkJSDCKMGjYL1aBSiR90ALdQq11OsvUkIgSu5ZmSZrKgToEVQCYKtmSYLUvPlmYENgirPVHUbZYV1m5JkcQLAhQvyIGejRv2hUlWerFVnmMlZPpo2HQK9PlCW+bdu3WRERLTAjRtnZftGRDSHTudf3kOsdJTT1YGibE5vBTmVa3KWJsjJTE4iIvImBjmJiIio0riYZcKOq7myrEAVAH+tCv5aNfQaFVLyzCgsRbJcar4Fqfl52JuSB6NGhbY1jOgW5Qc/N5mGGSYLzmaYoFOr0DLMAJ2btSeVsgotOJZWgL9u5OPm/7L7/DQqPNg4BLWKKdZjo8ziNGpUHh9bnlxVWC9J0SGr1YILFzbK2ho27F+mcZUH5ZqcmSYrrEKUWxD9VmE0hmDYsLlYtOgBqU0IKxYvHoXo6E6yfTlVvYheH+TQVrQuZ/FrZ3qidJmcyunqXJOTiIi8p/L9lUxERES3nKTsQmy/movE7EKHbQJAjlkgx+y9DLl8i8DelDwcSctH9yg/dIz0kwUwU/PM2J2chxM3C6RJsAdS8nB/w2CEugncWYTAuQwT/krLx4XMQigTTPMsAisuZmFcs1CPAqbxmfL1OOsH6Spl8CzSqIFaBVmBJKBkQc6rVw85FJOpCkHOUEUmpwCQVWitsssjVGYtW96P3r2nYtu2d6S2/Px0h+A4g5xF1GoN9PogmExZUlt+frpX+rZYTMjKuiprK13hIWZyEhGR9zDISURERBXmSk4hdlzNRXyWY3CzpAK0Kvhp1fDTquCnUcNfq4bJKnAh04R8i/P57AUWga1XcnHwej561fZHhFGDPcl5OJthctj3er4FP55Ox7AGQagfJF8XUwiBMxkmbL6cU2x17bR8C7ZfycFddQPd7ieEcFyPM6jyrccJABq1ChFGDVLy5IHoklRWP39+vex+REQLhIR4J+PMl/y0KujUkGUXpxdYSh3kLLQKxKXlIyGrELX9tega5VcpA9sVpXfvt5CSEoeTJ393uU9lX8e1PBmNoYogp3cqrGdmXgYUX+NwujoREVU0BjmJiIiozIQQSMmz4FymCblmKyKNWjQN0cNf5xjksgqBM+kmHLie57RYjacijRrEBulQL7Do5qrAjVUIXMkx43ymCeczTQ6BOKAo825NYvEftvMsAgvPZeKuOgHoGGmESqXC9TwzNibl4KKTLFRX9l/PR+MQPWLdBC2T8yzIUwRn6wdXvvU4baL8tE6CnJ4H+i5ckAc5q0IWJ1BUXT5Ur8F1u7VTiwt0O1NoFTiSmo89ybnI+d8is2cyit5PxQXEbyUqlRrDh/+IGzfO/a/gkKNatdqV76AqMaMxRLZ2ZtF09bJTTlXX6wOdFDpy5Fh4iNPViYjIexjkJCIiolKxCoHLOWacSS/AmQyTQ2Bn3SWgXqAOzcP0aBZiAFTA0dR8HErNR5abRTWDdGr0qOWHlmEGFFgEcs0CuXaV04P0atQL0DkNoDqjVqlQN1CHuoE69I4OwI18C3ZczcHJdMdsTU8IABsv5yA5zwy9RoVD1/MdpqXb6NRAi1AD6gfpsSoxC/Yxy1WJ2Xi8eSgMGuePQzlVPdygqdRToIuKDxXI2sI9DHIWFGTh0qXdsrZGjQZ4a2g+F6xXy4KcJSk+VGgVOJyaj712wU17+6/no1moAXUDK2+Au7zp9YF46KHlmDWrM3Jzr8u2hYTEws8vvIJGVvkYDPLiQ96aru6s6JDKg4xjnU65JiczOYmIyHsY5CQiIiKPmCwC1/LMuJpTiGv/q26e66asuQCKKqBnF2L9pRyoVYCLWeMAiqabd6/lj3Y1jND+b71KgwYI9vIM7XCjBsMaBKNrrhlbLrvOwDRoVOgYacRt4UZsupzjMIU97kaB0+MAoLa/Fu0jjGgeaoBeU/RYss1WbL78d9ZSpsmKTUk5GBTrWBwEgMMU/gaVOIsTKHrM9gK0KpfZtUoXL26D1fr341Wrdahfv7dXx+dLReu0/j3+jILiMzlNFoHDqUWFsNy9jwBgdWI2xjf3bB3XW0VoaCxGjVqCn37qC6v174xwTlWXU2ZXemu6emmKDgHOp6sLITwKkFLJCCFw8eI25OXdQKNGdzsUfSIiqo4Y5CQiIiKnsgutiM804VJ2Ia7mmpGab3GZsVgcAdcBzgCtCl2j/NE+wliuQZxa/lqMbhKC+EwTtl7JQfL/ploHatXoXNOIdhFGKctyRIMg/HktFzuv5bntM0inxp11AtAiVO/wob1zpBFnMwpwKfvvgMxfNwrQJFSPJiEG2b4mi0BSTtVYj9OmToAWdQO00hIEnWv6eXyscj3OmJgeDsGQykyZYZvhJpPTZBE4lJqHfR4EN21uFFjw59Vc3FmHQQp7sbG3Y9CgGVi58imprU2bRypwRJWP0SjP5PTVdHVPig4BjkFOq9UMi8UErdbg4ggqra1b38b27f8GANSrdzsee2wTNJrK/WUZEVFZMchJREREAIqCL5eyC5GQZUJCVqFs+q2nQvRqRBg1SMwuhJsZ6QCAaH8tOkYWZTtqKjBDrUGwHvWDdEjKMcNsFYgJ1EmZpDYqlQq31w5ATT8tVl7McnhsWhXQJcoP3Wr6S5mbSiqVCoPrBeGHU+kw2ZUhX5OYjTrN5dPvE7MLZZXK1aqiqf+VmUqlwugmIbiQaYKfRl2i6dUXLmyQ3a9KU9UBIFQvz1h1tiZngcWKQ9fzse96HvLcBDcbBOnQo5Y/Nl/OwdXcvwPi+1Ly0DxUj9oBlft1UN46dnwSwcF1cPbsatSrdztatBhR0UOqVBynq1d0JqdjoL6wMIdBTi9LT0/Ajh3vS/cTE3fgxInFaNNmdAWOiojI9xjkJCIiusWYrQI3CixIzbcgNd+MtPyin2/mW1DycilFBYCahurRNMSAmn4aqFQqmCxFVc1PpRfgfKZJCgqqVUVrVHaKNFaqYI1KpUKMB0G5ZqEGhBk0WBqfiZv/m5LcLFSPO6MD/jdl2b1QgwZ31Q2QFTnKNQusSszC8AbBUiZrfJZ8anydAK3L4OnevV/gzz//g6CgOhgx4mdERDQrdhy+olGpHLJSi5ORkYjU1FOytqoW5FRmcmYVWmG2CilYfia9AGsSsx0KSdlrGKxDz1r+qPO/98WgeoGYczpdCnYLFK3jOq5ZqEMQ/lbXpMkgNGkyqKKHUSkpg5wFBele6ddb09WBoinrXEfVu3bu/BhCyL+o3LNnOlq3fohLAxBRtcYgJxERUTVjMmXj2rUjuHr1MKxWM+rU6QpjjQ5IyCkKPF7KLnS7NqY7KgCRfhrU9teitr8OsUE6pxW09RoVmocZ0DzMgEKrQEKWCXlmgYbBegR6WDCosqrpp8WTLcKQmF2IEL2mRBXEAeC2cAPOpptwzq6w0PnMQnx/8iYGxgSifrAeCZmeTVVPTo7D2rXPAxDIzr6GX38dhokT46rUlMTz5+VZnH5+4ahVq2qtqxhicHxNZ5qsCDdqkJRdiGXxWS6/QGj0v+BmtCLoH+mnRc9a/thxNVdqS823YNe1XNwRzWnr5BlfrcnprPCQJ5SFhwAWH/K27OxrOHz4e4f2K1cOIDHxT8TG3l4BoyIiKh8MchIREVVhVqsFly7vw4WLO3H1ykGkJB9Gxo0zgHL1TF0I1BF3QF2zL9Q1+0LlF+1R/wa1CvWCdKgXqENtfy2i/LUlXjdTpy55dl9lp1apUL+Ua2SqVCoMrBeI70/elGX2pZus+PV8JpqF6pFWIM/AcVV06NixX2H/u05LO42DB79Dly6TSjW2iqCcqt6wYT+o1ZW3irwzRo0aRo0K+Xa/zwyTBQaNCssSnAc4Gwfr0bO2H2r7uw5Id4vyw+n0AqTk/f162J2ch6ahBtTy55/xVDxfrMmZnPwXCgoyZW2eBjnVag20Wj+YzX+vb8wgp3ft3j0dFovzwni7d3/CICcRVWv864iIiKgKyTdbcSElAafOrkNSwgakX94MUejBh9bCDFivroD16goAgCqoJdSxY6CJGQ2V7u/q3ioUTY2uH6RHg+CiwKaaU9u8LlCnxtD6QVhyIdMhq/Z0unyqup9GhSg/53+ynTq11KFt69a3cdttjzoENyojq9XiJMjZv4JGUzYhejXy7YKRNwss2J2ch2zFAq4Ng3W4o3aAR0FKzf/Wcf3xdLoUKBUAVidmYWyzUGj43qRi+GJNzq1bp8ru+/nV8DjICRStyykPcuaUeUxUJC/vxv+zd9/hbdT3H8Dfpy3bkveMd+JMh+w9yCIJI2WETQuE1dIyWmhpS0uh0F8HLbtQRgtlJVBW2CNkk71x9nASZ9iOt7w0735/KJZ9J8mWZclDeb+ex49zX53uvnYcx/r4M7B167/8Pn7gwCeoqjqExMSCbtwVEVH3YZCTiIiol5IkCdW1Jdh/4nscOb0H5Wf2oLlyK6T6/R0/uaNr1++Fa/fvIO3/C1IH3oCho36KvPQhSDKoPRPFrdY6nDq5BxUV+1Bffwr19adlb05nMzIyxmHChHtQUHARBKFvl6F3t3yzDrcMjsOXJQ2eieS+5Jq0PgPNlZUHUFm5z2u9ubkKa9f+GRdc8LeQ7jccysp2oLm5WrbWV4OccXo1ytsEOdeWNXkNGMo1aXFlvrlTvzhIjdJgYpoR68tag0Jnml0oqrJhZJKh6xuniKb8ZYfVWtul650+vQ379y+VrU2c+HOoVIG/rNTpYtDUVOk5VmZySpKIffs+xOnTWzF48OXIzJzQpT13lcvlQHX1IWi1UYiOToVWa+zR/bRn06bnZJ9PQVBBq41qsyZh06ZncNFF/+yZDRIRhRmDnERERN1EkkTU1h5HZeU+VFTsRUXFPlRXH4TTaQUAiJIAEYAoAXanHQ21RyA6gyzjE9QQTIMByQmp/oDf00RnA0r3voTSvS9hwID5SE4uREXFHpw5s9ur55ovxcXLUFy8DElJgzFx4n0YMeJH0GgYeAlUokGDGwpisbPKipWnmmRT11vkmn2XxfvK4myxadPTGDfuTsTF5YZqq2Gh7MeZmDgIcXE5PbSbrlEOH1IGOE1aFX6QYwoqM3pKahQO1dpRYW0Nou6psTLISR1S9uTsarn6qlV/kB0bjYmYMOHeTl1DOXxIGeTctesNfPzxIgDA5s3P4ZZb1iEtbWTnNxsClZUH8MYbs1Bff9qzptebEROThujoVNn7mJi2x6mIjk7t1qnxNls9Nm16RrY2bNg1MJszsX793z1rO3e+hpkzH+WwJyKKSAxyEhH1QVaniFq7iBqbCzU2F+rsLthcEpwi4JQkOEUJDlGCSwIMagFmnRpmrQomnQpmnQpGtQoNThF1Nhfq7CJq7e73TQ4RguAuWVYJwtn3gEYlwKgREK1RIersW7RWgF6tglpwl1RqBECtEqAWgCiN+z59ocxZkiQ4HE2wWmvQ3FwDq7UGVmut58/NzTWw2xugVuug0RjavOmhUmngdNrgctngctk9f3Y4mmCzWWC318Nms8Bmq4fNVoeamqOyEr1QEkyDIcSPhTZ+BPQJIxAdPwx6XRSiNAJShDMQKlaivORbFBd/C6u1xuc1Dh/+CocPfxXU/Ssr9+Ozz+7AihW/w7hxP8OYMbfDZAqs76eS3d6Ikyc3wuWyISWlEGZzVkinwZ44sQF1dcdRUHAx9HpTx08IM0EQMCrJiAFmHb452YhDda3l6loV0D+IIKfLZcfy5b/FwoVLQr7fUCou/kZ23FezOAF3ubo/KgG4PM+EqCCHbqlVAqalR+HDo/WetRMNTtQ7XDBp+1b/UupeynJ1u70BoujsVOZlixMnNuDQoS9ka1OmPNDp76PKIKfDIS9X//77t9o81oTVqx/FNdd82Mnddp0kSfj445tlAU4AZ/9ft6Cq6mCH1zAY4gIIiKbBZMro8v9zW7e+6PX/+7RpD0Kvj8XGjU9BFN0VAw5HE7ZufQnTpv22S/cjIuqNGOQkIuphTlFCk1NEk1NCs1Ns/bNLhM0lKd5EWOyibFhJQNophfVPgiSJgK0ScDUCggZQadu8VwOCFlBpfZYpqwUgXu+ePJ1w9s2kU8GoEWBUu9/rVILsh3pJkiBKgENyf3wGdet17fYGVFbuR23tMTQ0lKOxsdzzvrHxDETRCaMxAUZjAgyGeM+fJcklC162DWa639dCFB1e++/tVLo4xGbMQmbuBRhcMBe5ybkwaAQ/geVYIL8AmHAHRNGF48dXY8uW57F//1L333EINTVVYPXqR7B69SPIypqCoUOvxJAhVwTUr62q6hC2bHkBO3e+Jss20utjkZp6nuctJ2c6kpIGd3pvoujEF1/chW3bXgIAxMfn4+ab18Bs7tfpawXD5XK0O/XcpFPjijwTDtTasflMM5pdIqalR/ucRm+xnMSpU5tlaxkZY3H69FbP8e7d72DChJ/3eKmnP3Z7A0pK1snW+vef20O76bo4nf9g45x+0V7T0zsr36yDXiXA1ibb90CNHWNTem/pLPU8X715bTZLUFl8yizO6OgUjBv3s05fRzlhXZnJWVt7VHa8f/9SVFYeQFLSoE7fqyv27HkXJ09u7NI13D931KKysv02MwkJBbj66veRmnpeUPdxOq3YsOEJ2dqgQZciJaUQADBs2NUoKlrseWzz5ucwefL9UKuDG6BHRNRbMchJRNQOSZLgEIFGp4gGh/ebBHfWY2v2IyBA8GRTOkXAIUry4zZ/doqSz6m7He0JribAYYHktAAOC+Csdwcd1UZAHQVBHQVoogB19NlgpMr9BpX7WHICtgpI1nJItnLAWt7mz2Wtf7ZVAJKrwz0BqtbAZ8t7CGiCCqcEuD9LggqCxgTo4iHoEgBtPFT6BGj1CZBUeoiCBqKgaw2iuqzQNh2GpukgnJYDaK4v6eRnKoJoTNDHDkZC0hBkpQ3F0PzpyMocH9QEapVKjby8WcjLm4Xa2uPYsuUF7Njxb6++iK3na5CYOBDx8f1hMmXI3hoayrBx41M4c2a3z+eeOLEOJ06sw9df/wL9+o3HoEGXIj4+X1bKZzDE4tChL7Fly/M4cuRrn9ex2epQUrIWJSVrPWt5ebMxceIvUFBwYUC9QB2OJrz//rU4ePBTz1pNTTGWLFmARYvWeGUWhUpDQzl27vwvdu58FVVVh1BQcBGuvPIdv/cTBAGD4/UYHN9+iaOyJ57BEIfrrvsUzz8/RNZz75tv7seiRWtDmgkbKsePr5H9gkGl0iA3d0bPbaiLYvW+vw6HxesxKgRl5RqVgAGxOuypaZ2avL/WxiAntUtZrg64+y13Nsh57NhqFBd/K1ubOvW30Omi/TzDv/bK1SVJRF2dslWKhPXr/4Ef/OCVTt8rWA5HM7799tfddr/q6kP49NPbcdttm4J6/o4dr6KxsVy2Nm3ag54/T5z4C1mQs6GhFLt3v4sRI34U3IaJiHopBjmJKGJJkuSZWtwShHQHJAU4RAn1dhEWhwsWuzs7st7hQqNDgtUlwupyZ1VaXZLX5OOg9yM6IXRQHiY5myA1HIJUvx9S80nAVgnJVgnJXun5Mxw1AQYeu5MIiGdfeLezNQllZ997noX2ckyDyT/tE7SxEGIGQjANdL/XxaP1syJBKwjQqwUkxmdjUGYhhqblIrqdLLFgxcXl4IIL/oYZMx5GUdFiHDnyNVwuB1JSCj1viYkD2830GDlyEYqLl2HDhidw5Mg3fs87dWqzV+ahm4DWjz1wR48ux9Gjy5GQUIAJE+7FyJE3+Q0cNjVVYsmSBT4zcsrKduCDD67HNdd8FFTQ2BdJEnHkyDJs3/4KDhz42FMiCACHDn2OZcsewMUXv9CleyhL1QcOvAQxMWmYNu33WLbsl571EyfWYd++DzF06MIu3S8clF8vmZmTekX7gGApe3ICQJJBjXlZMSELMg+J18uCnCcbnbDYXTCH4fsDRQatNhqCoIbU5ueGzvbllCQJK1c+JFszmTIwZsyPg9pTe0HO+vpSn9UV33//BmbOfBQmU3pQ9+ysjRufRl2d/Jerl1/+FjIyxqChoRwNDWVnK0rKzlaVlMmqTIKpEDl1ajMqK/d3ulLB5XJg3brHZWv5+XPQr994z3FGxljk5EzH8eNr2nyMT+K8837YK38JRkQULAY5iahPc4kSypudKG92ng1aiqi3i6h3uIOWjtBW4vokSS53VmRzKSRrKWB1v3cfl3mO4WwANGYIhlTAkApBn+b+s6CG1HAQomU/0HQcwQR8KIQ0ZkAXB6HlvTYW0MQAotMdyBVtkFw2QLS6g80qHaDSQ1BpPX+G2uDOWtXEABoThJb3+mQIpgIYo9OQZNAgyaBBokGNOL0KMRoVorXufqcaVfe+4NBqozB69G0YPfq2Tj9XEAT07z8X/fvPRXl5ETZufBr79r0Pm80S4BX8fb0L0OliYLfX+3ncrbr6EL788i6sXPl7DBt2Lfr3vwC5uTM8WUo1NUfx9tvz2+2ddvDgp/jmm19i/vynvB5zuRw4fXoLtNpopKWNaP8jkSRs3foi1q37G+rqjvs9b+vWf6Gw8Drk5Exr93r+NDVV4dix1bK1wYMvBwCMH38Xtm59ATU1xZ7Hvv321xg0aEGvK0tUBjn7cqk6AGhVAnJNWhyrdwc3dCoBV+SZoVOH7t9zrkkLvVqArc1v3w7U2jGO2ZzkhyAI0OvNsl6NVmvngpzFxd/KMukBYOrUB4OeMu5drt7ak9Pf906Xy45Nm57BnDl/DeqendHQUI7vvvuzbC0n53wMH349BEHoMAgpSRKs1hpPALQ1INoaDG0bJG3bNqaoaAlmzvxjp/a7a9cbXp+3adN+53XexIn3yYKcZWU7cezYKuTlzezU/YiIejMGOYmoT2l2ijjV6MSpRgdONjpQ2uiEs5tigpKzCVL9Pkh1uyHWFUGy7IXUfAqwlQeeWem0QGqwAA2HGMoMigqIyoKgT4GgTwH0ye7AoT4ZUGkgOeoAew0kR23re0HtDlRq4yBozWffxwG6WPd7bazncWjNEITQZETFaFSI06sQq1MjVq9CnM7dnzTRoEaUJrjhI71daupwXHrpf3DxxS+guPhb7Nv3Pvbv/9jvoCNfDIZ4jBp1K8aO/Qni4/NhsZxAefn3nrejR1egqanC63lWay22bXsR27a9CEBAevpo5ObOQFHR22hoKFPcIw6AINvXpk1PIzGxAOPG/RSAu7x9+/b/YMOGf3iyeQYPvgwLFryCqKgkr/vbbPX4+ONF2Lfvg4A+zk8/vQ0/+cmuoCbRHzz4mSwrS6MxoH//eWf/rMfs2X/F++9f7Xm8puYINmx4ClOndl/pZUcslpOorNwnW+vrQU4AuCTHhO9Km2AXJUxONSLBENoMS41KwMBYHYqq5SXrDHJSewyGWEWQszbg5/rK4jSbs4L6pVgL78FDrZmctbXt/4Jo6tTf+uwzGkorVz6k6BMqYN68JwPOeBQEwdMXPDl5aLvnfvXVz2UT0XfvXowZMx4J+F6lpTvw1Vfy6faZmZOQk3O+17kDB16ChIQBqK4+7FnbsOEJBjmJKKIwyEkUYi0l0moBfn9AaRk003x20IxNlGB3uadhO0QJdtHdB9KoFmDSqWDSqmDWqWHSdn+GV3dr+fw5RAk1NhcqrWffmp2otLpg6YbUTMnZCKnxCKSGlrdDkCx7INUfAjrdQTP8tNoo6PXms1PCG89mRAQWQlWpNIiJSYfJlI6YmHTZn9u+NxjiIYpOiKIDLpdD8efW96LohMvlgCS5IElnBxdBcg8UEp2w2erQ1FSJ+sYqNDRWoaGpEs3WGoguGyTRCUl0QBLd15IkCTpTPhAzEM3GgWg0DIAQ0x+C2v1iXoC7FDTFqEFqlAZRGgENDncWb0vPVMvZrN5QMutUSDaokWTQIMGghlEtQKcWoFedfa9WwaAWIv7fans0Gj0GDrwYAwdejEsuceDYsZXYt+8jVFbu9ZTzKV9kp6WNwvjxd6Gw8FpotVGe9djYbMTGZmPgwEsAuIcrFBUtOdsLtMjPDiSUlm5Daek2r0fM5kzccMNXaG6uwhtvzJGVFH755d0wGhNQVXUImzc/i6amStlz9+9filOnNuPyy99EXt4sz3pl5QG8++7lXkG71s+HERkZY1BS8p1nrarqINas+RNmzfqTn4/BP2Wp+oAB82V98YYOvRJZWZNx4sR6z9qqVX/AgAHzO8xG7S5HjiyTHRsM8UhPH9NDuwmdGK0K87PD09+1xeA4vSzIearRiTq7y2e5PBHg3ZezM+Xqhw59gVOn5H0ip09/CBpN+32D29NeuXp7WfA2mwXbtr2MKVN+FfS9O1Je/j127PiPbG3kyJuQnj46LPcbPvx6WZCzuvowTp/eIis198diOYUlSxZ4TaefPv33Pl+DqFRqTJjwc3z55V2etUOHvoDFchJmc2YXPgoiot6DQU4iP1oGzrQEHe2uluBj65+bzw6jqW95s7uPRbgDMFqVAI3KnXmhFdzDaJqd7ucGy6gWYNS4gyh6tQCDWoBBo4JeJUAlACrB/b4lyKoR3BOqDZqz554NwAgCPB9X249RJbgDNTqV+/q6s4EbTTtB284QJQkVzS6UNTlR2uREWZMTjU7RPYjn7Oc8lCRJAuyVkBqPQ2o6DqnpGKTG4+410QkVnFDDBbXkhAouOJvLYG88FdpNdJqA+Ph8JCUNQnR0GqKjUxAdnXJ2UEsKjMZEGAyx0OtjodebvaY1S5IEp9MKh6MRDkcTRNEFSRLbvLkzwKKikhEVlRjQ0JbeoMkp4nSjE1aXiMSzQUZtAIHERoeI003urN/TZ7/ubH4arWoEIErr/sVCTMubxv0+0eDOwtSr+8bnq7dQq7Wecva2nE4bGhvPoLGxHEZjIuLicgP6HqPRGDBq1CKMHHkzjh1biY0bn8bBg58hkMB+Sspw3HDDF54Xcz/4wb+xdOlNnsclScQHH1zX7jXq60/jjTfmYMqUBzBz5qM4dOgLfPTRjT7L6tPSRmL06NsxfPj10OlMePXVybK+pOvW/Q3Dhl3dqWm6dnuj14CmllL1FoIgYO7cJ/Gf/0xCy+fF5bLjww+vx+23bw26xDSUiovlper5+bND1hM10uWatDCoBVjbfB/bX2PDhNSodp5F5zK9Xp752Jly9fXr5b0e4+PzMXLkzV3aj3eQszVI114mJwBs3PgUJky4p0tBVn8kScI339wvKx/XaqMwa9b/hfxeLTIyxiE+vj9qao541oqKFncY5LTbG7FkyQLU18t/Zh0x4iYMGHCh3+eNHHkzVqx4sE1LGQm7d7+DyZN/6fc5RER9CYOcdE6TJAkVVhdONDhwssGBM80u2M4GMLsSiATcLyvd12k5Co1ml4RmV/cPnREAT8Czo/caAXBK7oxVR5sJ43V2d3AzHOXliQY1EvVqGMRquKq2oPHMRtSUbUBNxfdev+Fuy4V25+R0SktWpNncDyaT+63lz2ZzPxiNiWhurkJ9/WnU15eivv40GhpK4XQ2IyGhAMnJw5CSUojk5CGyTLbOEgQBWq2xVwQyQilKo8KA2M73FIzWqlAQq0dBrPsFkSRJqLOLkABoVIBWcGddtpd9TaGn0egRG5uF2NisoJ4vCIJnSnx19WHs3fsBjh5djpKStXA6rV7n5+bOwDXXLJWVOY4YcSOqqw9jzZrHOnl3CevW/Q17974n633ZwmCIx+WXv4mCgotkX1MLFvwbL7882jOISBSd+OSTW3HrrRug6mAoWYvDh7+SfXyCoPZkubaVmTkBkyf/ShagqKjYi2+//TUuvPDZgD/ScJAk0WtKc35+3y9V7y7qsyXr38tK1u0McpJfyvLuQDM5RdHlNbBt+vSHvH652lnKieztZXIWFFyMQ4c+9xw3NJSiqOhtjBp1S5f24MuhQ194fW+aMuXXMJkyQn6vFoIgYPjw62X/D+3e/Q7mzn3C7y9+RNGFDz+8AWVlO2TrOTnTccklL7X7s4xOF40hQxZi587XPGtFRYsZ5CSiiMEgJ50zWsqfa20uVFldONnowMlG/xldoSZJLsBRBzjqIDksre+dFnePwJj+EKJyIai9fzMtiQ5IjccgNRx094CURPe4cAgQILj/rNJDiM6DEFMA6FNCHqwRJQnWpjI0NxyGVH8IUuNhSE2nAJUGUBsBtdFdRqw2uoevSCIgOQHR4e5XKTkhuZoBRy0ke637/dn+iZBcgCbm7HCWmNY/Q3I/x9UMOJsguZoA0QpBpYdWZ4bRGAuTMR6x0XHQqFQ4dWoTKiv3h/Tj9iYgKWkQ0tJGIS1tFJKSBnmCmNHRKX0mK/JcJggC4vTMGIskCQkDMHXqrzF16q/hdFpx4sQGz/T1+vrTGDJkIWbP/ovPzJ8ZM/6I6urD2L17ic9rFxRchLFj78Tmzc95DcrxFeBMSxuJq6/+EPHxeV6PpaYOx5Qpv8Hata0l6qdPb8WmTc9i0qT7AvpYlaXqbYcsKc2a9RiKi5fJXghv3vwcCgouwoAB8wO6XziUle30agXQv/8FPbSbvmlIvF4W5CxtcqLW5uL3NvLJO5OzNqDnWSwn4HLZZWsFBRd3eT/tl6vLJ5oPHXoVHI5GHDu2yrO2bt3jGDny5pD+zOVyOfDNN/fL1kymft0S/FMGORsby3Hs2Erk58/xef633/4GBw58LFtLSBiAq6/+MKAM1+HDb5AFOcvKdqCiYh+Sk4cE+REQEfUeDHJSRLE6RdTYXai1iaixuTxvtWfLyLuDJNrdfRzrD0CqPwipoeX9EUBytP9kQQVtdA4MsQOgj8mBtakM1toDcDYcdQcMA6UxQzAVQIgpgGDMhDsP090bEWd7JMLZ5A4yOmraBB1r3UmnZ6dECyotIGgBQYDUdNw9HTxcXI2QbOWew/ZCzxIAexNgrwXqAJwMy4YExMZmIylpEBITByEpaQjS00chJWW4VwYCEfUeGo0BeXkzzw5S6LjfpSAIuPTSV2GxnPRMDxYEFQoLr8WUKb/2lJIXFFyEjRufxrff/kbWx7Ot8877IS655KV2M7GnT/899u17X/YLmRUrfo/Bgy9DfHx+u3t1uexnS/NbDRlyhd/z1Wodrrjibbz88mhZ9ufSpTfjzjuLEB2d3O79wkUZLE5IKEBcXG6P7KWvyjZpYVQLaG5bsl5rw0Rmc5IPyp6cgZartx1QAwB6vdnn4LXO8hfklCTJK5MzLi4Hkyc/IAtyVlUdwIEDn2Lw4Eu7vJcW27a9hKqqA7K12bP/0qXKmkAlJQ1GevpolJZu96wVFS32GeTctu0VbNjwD9mawRCP66//HFFRiQHdLzd3BmJi0tHQUCq736xZna1qICLqfRjkpD5JkiTUO9z9+U41OlDa5ESV1SX7YT/UBMBTkq1VtbwH9PZTEGu2wlq5FZYzm1FTsROi4rfeAZNEOBqOwtFwFN7d3TrBaYFUsw1SjffQjU5tp0vP7l1UKi3i4nIRH5+P+Ph8mM2ZUKv1UKu1UKk0Z9+00OtNSEwciISEgogr9yYi3zQaA268cTl27XodTqcVBQUXeQUcBUGFSZPuQ27uTHzwwXWyF8MqlQZz5z6J8ePv6jCLXqPRY8GCf+O116ah5bus09mMjz++Bddd9yn0epPf5x47tsqrzHTQoPZf5CcnD8HcuU/giy9+5llrbCzHp5/ehmuuWdojLRqKi+VDhyJhqnp3UwsCBsbpsKuqTcl6jZ1BTvJJmckZaLl6VdUh2XFCwoCQfM/QauW/LG5pK2S11iimmgOxsTmIi8tFSspw2bC5dev+hkGDfhCS/TQ312DVqodlaxkZY3HeeTd0+dqBKiy8Xhbk3LfvA1x88QvQaAyeteLib/HFFz+VPU+l0uCaaz5EYuLAgO+lUqlRWHgtNm58yrO2e/dizJz5KNv2EFGfxyAn9XqiJKHWJqLS6p6uXdbkHh4SyszMWJ0KWTFaZEZrEatTQRBtEO1VcFmr4LBWwm6tgrWpAs3NVWhqqkRTUwWamipRVrkfDQ1lIdsHhYZGY0Rm5kRkZU1BdvYUJCcPhcnUj0MtiMgvtVqL0aNv6/C89PRRuOOObVix4ncoKnobiYkDMXv2X5GTMy3ge2VnT8G4cT/Fli3Pe9aOH1+Nl14aicsuex3Z2VN9Pm/fPnmper9+E2A29+vwfmPH3olDh76Q9bU7cOATbN/+CsaMuSPgfYeC3d4omzIPAPn5LFUPxpA4vSzIWdbsRI3NhXiWrJOCsidnoOXqykzOhISCkOzHXyancuiQIKhgNmdCEARMmfIAPvroR57HTp7cgBMn1vn9ftkZa9b8Cc3N1bK1uXOf7NYWRIWF12LZsl+h5ZdfNpsFBw9+jqFDFwIAKir24X//u9LT07nFJZe8jNzcGZ2+3/Dh18uCnDU1xTh1ahMyMycG/TEQEfUGDHJSSB2rt2NbhRUCgBSjBqlRaqQaNTBpVe3+ZlCSJDQ5JdTaz5aX20RU21yotLozNEOZoBmjVSFOp0KyQYV4ZwnU9XtQW/Y9yst3YU3lPjQ2nvH6LXKoqVQaGAxxMBjioNPFoL6+FI2N5R0+Lzo6FYmJBVCr9QAk9+Tws++t1lpUVR2E09kc1r1rNEYkJQ1CUtJgxMe7f6PvcDR53pzOZjidVk9mZGuWpAZqtR5GYwKMxngYjQkwGNzvVSo1bLZ62O31sveCoIJWGwWtNgo6XTS02ihoNAY4nVZYrXWw2eo87x2OZiQkDEB29lSkpY3sclN8IiJ/dLpozJ//NObNeyrorJfZs/+MAwc+hsXS2nCjpqYYr702HVOmPIAZM/4IjUYPSZJw4sR6bNz4pFeQUzlV3R9BEPCDH/wH//rXcDQ1VXjWv/76F8jJmY6kpMFBfQzBOH58jazHnyCoz7YWoM7KNmkRpRHQ1Gaa3/4aGyalMZuT5JTl6oFmctbUKIOcA0KyH19BTl+l6iZThufnuWHDrsGKFb+T9exct+5vXQ5yVlUdwubNz8nWhg69slO/uAoFs7kfcnNn4NixlZ613bsXY+jQhWhsrMDixRd7/b1NnfpbjBq1KKj7paePQUJCAaqrW7N1i4oWM8hJRH0eg5wUEqIkYW1pEzaUtwbYDta1voiJ0ghINWqgUwtwSYBLlNzvJQl2l3vScbDTzCWXzT3Ex1YByXoKaC6Fzn4aGnsp0FwKldgMteCeoqwW3GXnTaID2yoPtDt1u6vM5iwkJw9BUtJQJCe73+LicmE0xkOjMXq9MLZa61BVddDzZrGUwGhMOnuNwUhKGux3uITncyGJqKsrQUXFPlRW7kdl5T40N1dDEISzv412vxcEAWq1wUfAMR4qlQYul13x5oDJlI6kpMFnf6PO4TpERF0p69PrzVi4cAnefvtCxS/W3JPbDx/+EuPG/Qw7dryKU6c2+bzGkCGBBTkBICYmFZde+iqWLFngWXM4mvDuu1fg9ts3ewUdAtHyi7bO/J+gLFXPypoEvd7c6XsToBIEDIrTY0dla7/V/bUMcpI378FDwZerh4Ly+40kiXA6rV6ZnLGx2Z4/q9VaTJx4H77++ueetYMHP8OZM3uQkjIs6L18++2vZX2W1Wod5sz5W9DX64rhw6+XBTkPHvwcDQ3l+N//FqK29qjs3KFDr8SsWR33nfbHPdX9Bqxe/Yhnbc+edzFv3pNQqRgiIKK+i9/BqMvqHS58cqweJxr8D8Zpcko4Wu89qEGSRMB2BnBZ3dPH2765rO5BNNZySLYzkKzlgK0ckq3K3XPSUQc4LIBo87puJ0b0hITRmIDMzIno128isrImISNjrNdvzTtiMMSiX79x6NdvXND7EAQV4uJyEReXi4KCC4O+DhERhV929lT85Ce78NFHN+LEiXWyx8rLv8dnn/3Y73Pz8mZ3qgcbAAwceAnGjr0TW7f+y7NWWbkPn3xyKxYufKfDoK0oulBWthNHjy5HcfG3KCn5DqLoREpKIdLSRiE9fRTS0kYhLW2E36CpcugQS9W7ZnCcThbkLG92odrqQoKBJevUSlmuHkgmpyi6UFNzRLYWuiCn9wBHh6PRK5MzNjZHdjx69K1YvfqPsFprPGvr1/8dl13236D2cezYKuzfL8+QnzDh3g6HwIXLkCEL8fnnP/UEXV0uG159dTJqaopl52VkjMNll73e5aSD4cOvlwU5GxvPoLh4OQYMmNel6xIR9SQGOalLjlrs+PR4vaxUqj2SJEFqOAyp8juIlWshVq0H7FVh3mXwBEEFozERUVFJiI5ORlRUEqKiWt4nISYm7Wy5R2gasRMR0bklPj4fN9+8GuvX/wMrVz7kd3J7C73ejDFjfozp0x8K6n5z5z6BEyfWo7x8l2dtz57/ITNzEiZO/LnX+S6XA0VFi3Ho0Gc4enSFV986ACgr24Gysh3YubNlRUBGxlj84Af/9kynBwCL5RQqKvbInsuhQ12TFaNFtEZAY5ufw4432JFg4OA8auWdyVnb4XPq60/JWksA4evJCbhL1jsKcup0MRg//i6sWdM6Bbyo6G3MmvUnmM2ZndqDKLrw9df3ydaiopIwbdrvOnWdUDIa41FQcBEOHPjYs6YMcMbGZuO66z4JydT3xMQCZGSMw+nTWzxrRUVvM8hJRH0ag5wUFFGSsK6sCevK5P0fxaqNEE9+AJNUBYckwCYKEKECoAZEK8TqLYCt496T3Sk6OgVpaSORmjoSaWkjEBub7QlkGo3xLM0mIqKwUqnUmDr11ygouBAffvhD2QThFrGxOZgw4V6MHn1rl8q7tVojrr76A7zyylhZoOObb36J9PQxsj50p05txqef3o7y8u87eRcJp09vwVtvzcPtt2/xBB+Ki7+VnWUwxCEjY2ywHwrBXbKeHaPFvtrWYFRFs6sHd0S9kbK6yOm0wuWyQ63W+X2OslRdp4tBdHRKSPbjK0Bntzd4lavHxeV4nTd+/F1Yv/7vcDrdGcyi6MTGjU9j7tx/dGoP33//JsrKdsjWZsx41CvrtbsNH369LMjZlk5nwnXXfYaYmLSQ3q9tkHP//o/gcDSFJIhKRNQTGOSkTmtwiPj0WD2ON7Rmm4iWfXDt+xPEcncZWm2P7ExATEwqzOYsmM2ZnvfuH1aENpmW7vdmcz+kpY0M6Q8KREREwUpNPQ+3374FK1f+AZs2PQ2Xy45+/cZj0qT7MWTIFSHrk5aQ0B+XX/6mrD+nJLnw/vtX4447tkOvN2HFioewefOz7rYyQWpoKMM771yKRYvWQquNQnGxvFQ9L28We7+FQJJRA7QJclZaGeQkOV+BO6u1DtHRyX6f4z1ZPXRVS+7BktGy3vh2e8fl6oA7OWHkyFuwdesLnrVt217CtGm/g9EYH9D97fYGLF/+oGwtOXkoxoy5vTMfRlgMHLgAOl2M1xBUQVDhyivfRWrq8JDeb9iwa/DNN/d7vtfb7Q04cOBTFBZeE9L7EBF1l4j5yfL555/H3//+d5SVlWHEiBF47rnnMH78eL/nv/fee3jooYdw7NgxFBQU4G9/+xsuuugiz+OSJOHhhx/GK6+8gtraWkyZMgX/+te/UFAQmjKNvuzbkw2eAKfUfArO/X+DeOJdAMG/EFISBDXUah2io1NgMqUjJsb9ZjKlIzo6FUZjPPT62LMTymM9k8rb+400ERFRb6fR6HHBBX/D1Km/gdPZjJiY9LC0Qxk48BJMm/Z7rF3bOriioaEMS5ZcgqamKq9gQ1uJiQORlzcH+fmzYTQmoLR0h6dkvaJin7vH9lmlpduxdOnNWLhwCY4ckQ8dys9nqXooJCn6b1Zau7szOfV2ynJ1wN2Xs3NBztC+BtLp5EHOxsZyNDVVys7xlckJAJMn349t216UBea2bn0R06b9NqB7r1v3dzQ0lMrW5s59olf80kWrNWLIkCuwa9cbsvX5858JS799kykdeXmzZJn2u3cvZpCTiPqsnv9OHgLvvvsu7rvvPrz44ouYMGECnn76acybNw8HDhxASop3WcX69etx3XXX4S9/+QsuueQSLF68GJdddhm2b9+OwsJCAMDjjz+OZ599Fq+//jry8vLw0EMPYd68edi7dy8MBkN3f4i9yuzMaByrrkDD/mfgKn4FEK0dP0nBZOqHvLyZyM2didzcGYiJSYNKpYEgqD3Tv4mIiM5V7oykwLKSgjVjxiM4fXqzbBhQael2n+empp6HCRN+jvz82bKJxwCQmzvD8+empir85z+TUF3dWuq6d+97EAQVmpoqZM9jP87QSDbIf5xvckpocoiI0rLdDrlpNAaoVFpZz9+O+nK2/TcMhG7oUAudLgaNjWc8xxUVe73O8ZXJCbh7GQ8dehX27HnXs7Zp0zOYNOkX0Gjaf53W0FCG9ev/LlsbMGA+BgyY35nth9W4cXfh++/f8gRxx4+/G+PH3xW2+xUWXi8Lch469CWam6thNCaE7Z5EROESEUHOJ598ErfffjsWLVoEAHjxxRfx+eef49VXX8VvfvMbr/OfeeYZzJ8/H7/61a8AAI899hiWLVuGf/7zn3jxxRchSRKefvpp/P73v8ell14KAHjjjTeQmpqKpUuX4tprr+2+D64XOlT0GpqX/QouW63Px6OikjFq1K3QaAyQJBckSYQougBIiIvLQ17eTCQkFDCQSURE1INUKjWuuGIxXn55NOrqSnyeo1brcf75D2Py5F9CrdZ2eM2oqERcd90n+Pe/J8omOLcNRgBAfHx/xMfnde0DIABAnF4FtQC42syArLA6kaNldQu5CYIAgyFO9osGq7X9Ceu+ytVDSTl8SBnkNBoTfU5hbzFlygOy7yuNjeXYtesNjBlzR7v33bv3AzidrTMFBEGNCy7oXD/PcOvXbxxuuOEr7N37Hvr1G49Ro24N6/2GDLkCn39+J1wuGwBAFB3Yu/f9Dj+XRES9UZ8Pctrtdmzbtg2//W1reYJKpcKcOXOwYcMGn8/ZsGED7rtPPk1v3rx5WLp0KQDg6NGjKCsrw5w5czyPx8bGYsKECdiwYcM5H+QEBNh9BDi12mhMnvxLTJp0P/R6U/dvi4iIiDolKioRV1/9AV59dYrXJOWcnPOxYMHLSEwc2KlrJiUNxpVXvoPFiy/229OTWZyhoxIEJBrUONNm4FCl1YUc/ihGbRgMsbIgZ9tfQihJkoiamiOytVCXq2u18gCmMsjpr1S9RXr6aOTnz5FlIK5f/3eMGnUrVCq13+cVF8vbZgwbdhVSUoYFuu1u07//Bejf/4JuuZfBEIuBAy/Bvn0feNb27HmXQU4i6pP6fB1LZWUlXC4XUlNTZeupqakoKyvz+ZyysrJ2z29535lrAoDNZoPFYpG9RaKRI29CUtIQz7FKpcG4cT/DPfccwYwZjzDASURE1IdkZIzFggWvQBDcgQG9PhYLFryCm25a0ekAZ4sBA+Zj7twn/D7OIGdoJSlK1jl8iJSUfTnby+S0WE55ppe3CHcmZ2XlPtmxv1L1tiZPfkB2XF19GPv3L/V7vig6cezYStnagAEX+Tn73DJsmLwHZ3l5UQ/thIioa/p8Jmdv8pe//AV//OMfe3obYadSaTBnzl/xzjuXYtiwqzFr1v+F/AcfIiIi6j4jRtyIjIyxqKjYh7y8WQFPKW7PhAn3ory8CDt3vipbFwQ1cnNndvn61IrDh6gjBkOc7Li9npzKUnWtNhoxMWkh3Y8yyOlwNMmOAwly5ufPQVraKJSV7fCsrVv3NwwZcoXPtlinTm2BzSZPQsnPn+N13rkoPj5fdmy11kKSJLYXI6I+p89nciYlJUGtVqO8vFy2Xl5ejrQ03/8Zp6WltXt+y/vOXBMAfvvb36Kurs7zduLEiU5/PH3FwIELcOedRbjyyncZ4CQiIooAyclDMXTowpAEOAF3H8CLL34B2dlTZeuZmRNhMHhPe6bgJRsVQc5mFyRJ8nM2nYuU/+baK1f31Y8z1MEuZZBTqaNydcD9PWbKFHk25+nTW3DmzG6f5ytL1ZOTh8FkSu/wPucCZRBcFB2y3qVERH1Fnw9y6nQ6jBkzBsuXL/esiaKI5cuXY9KkST6fM2nSJNn5ALBs2TLP+Xl5eUhLS5OdY7FYsGnTJr/XBAC9Xg+z2Sx7i1SCICAlpbCnt0FERES9mEajx9VXf4DU1BFnj42YOfOxHt5V5FGWqze7JDQ5GeSkVp0pVw/3ZHXAuyenUmxsdkDXGTr0SpjNmbK1vXvf93lu2/6dAJCf3z09L/sCZZATaD/bl4iot4qIcvX77rsPN910E8aOHYvx48fj6aefRmNjo2fa+o033oh+/frhL3/5CwDg3nvvxfnnn48nnngCF198Md555x1s3boVL7/8MgB3AO/nP/85/vSnP6GgoAB5eXl46KGHkJGRgcsuu6ynPkwiIiKiPic6OgW33bYJZWU7EBeXG/KyVwLidCpoBMCpmLAe3UcnrBdVWbGurAlGjQrzs2KQGhURL1l6lDLIafMxRLRFuCerAx1ncgZSrg6422gNHXoVNm58yrO2d+97mDlT3kLMZqvHyZPyobTdNdinL/CVXW+11sJkyuiB3RARBS8ifmK45pprUFFRgT/84Q8oKyvDyJEj8dVXX3kGB5WUlEClak1anTx5MhYvXozf//73ePDBB1FQUIClS5eisLA1M/GBBx5AY2Mj7rjjDtTW1mLq1Kn46quvYDAYuv3jIyIiIurLNBo9MjMn9vQ2IpZwdsJ6edsJ680u5PbBWZB7qq34vKQBAFBrF/FFST0WDQ5NC4VzmXdPzs6Vq4daKMrVWyiDnJWV+3DmzB7Z1PTjx1dDFFt71apUWuTkTO/EjiObSqWBTmeC3V7vWWMmJxH1RRER5ASAu+66C3fddZfPx1atWuW1dtVVV+Gqq67yez1BEPDoo4/i0UcfDdUWiYiIiIjCIsmgkQc5++CE9ZIGB744G+BsUd7sQq3NhTi92s+zKBCB9uSUJNFHkLMg5PvR6fyXq2u1UTAaEwO+VmbmBJhM/VBff8qztnfve7Igp7JUPStrUoeB1nONwRDHICcR9Xl9vicnEREREdG5zmv4UB+bsF5ldeLDYgtcPlqJHq23d/+GIkygPTnr60u9Bs50dyZnbGxOpwYdCYIKQ4deKVtT9uVUDh1iP05v3tm+tT2yDyKirmCQk4iIiIioj1MOH6qwdv+E9UaHiC+O1+O1/TXYeibwycxNDhHvHbHA6ivCCeBYvSNUWzxnBRrAUmZxajTGsEwgby/I2ZlS9RZDh8or9Coq9qCiYh8AwGI5hYqKvbLH8/PndPoekU75NdLcXNMzGyEi6gIGOYmIiIiI+rgkgzyT0+aS0OAUu+3+VVYn3jhYi++rbShvduHbU43YXW3t8HlOUcIHRy2otfvf67F6B8RuDthGmkDL1X1NVheE0L9k7CiTs7OysibBZOonW9u79z0AwNGjy2Xren0sMjLGdvoekY6ZnEQUCRjkJCIiIiLq42J1KmgVP9lXNndPX86TDQ68ebAOdYpA5YpTjbC2E2iVJAmfHa/HqUZ5ab2vgG1ZU98qv+9tfJWr+8r07Y6hQwCg1frvyRlMkFMQVBgyZKFsrSXIqSxVz8ubBZUqYkZThAyDnEQUCRjkJCIiIiLq4wRB8CpZ747hQ/trbFhyuM5nqXmTU8Kq001+n7u6tAn7a+X9Ns1aFa4dEItERaDzKEvWu0SZySmKDjid3pm23RXkDHW5OgCvvpxnzuxGZeV+r6FDLFX3jUFOIooEDHISEREREUUAZQZkRZiHD20+04ylx+p9DgtqsbPKilON3gHKnZVWbCyX9+3UqwRc1d+MGK0KeSat7LGjFg4f6gplAAvwHcTyLlcP/WR1IPTl6gCQnT0FMTHy/qGrVj2ChoYy2RqHDvmm/Bqx2Wp7ZB9ERF3BICcRERERUQRQBjnDVa4uSRK+PdmAFacavR7LM2m9yua/KmmQ9dQ8arHj6xMNsnNUAC7LMyHZ6M5GzTXpZI+fbnTC5uq+HqORRlmuDnj35ZQkqU9ncvoqWd+z513ZcWxsTtg+pr6OmZxEFAkY5CQiIiIiigDKcvWqME1Y31tjw9YK71LnkYkGXNXfjKlpUbL1CqvLc/6ZZic+OloP5a7mZcUgz9wa2MyO0UIltD4uAihpYMl6sNRqLTQao2zNapUHORsayuBwyNsLhC/I6bsnp0ql8crG7Ixhw65q9/H8/DkQBKHdc85VDHISUSRgkJOIiIiIKAIkGxUDe0QJ9Y7QZz8e89Ef8/z0KMzLioZKEDA2xYhkRVbp2tJGnG504P0jFthFeYhzYqoRI5IMsjWdWkBmtLJknUHOrlD25VQGsZSl6hqNAWazfGJ5qPjL5DSbs6BSqX0+FoisrCmIjk71+zhL1f1jkJOIIgGDnEREREREEcCkVUGvkmephWP4UK1dfs2JqUZMSovyZMipBQHzs+VBLIcIvHmwDhZF0HVInA7np8szP1vkKvpy+gquRipRkmBvr9lpELx7LsozOZWl6vHx/SEI4Xm56M4q9c6ojI3N7tJ1VSq1V8l6W/n5s7t0/UjGICcRRQIGOYmIiIiIIoAgCF5TySuaQz98qNYmD1SmR2m8zukXrcXIRHl2pjJk1y9ag4tzTH7Lh/PM8iBntc2FOnv4J8b3tCN1djxbVI1ni6rwVUkDHGJogp3KvpzKcvXu6scJuL9WfZWsB9uPsy1/JetpaaMQFZXU5etHKl9BznC0uyAiCicGOYmIiIiIIkSSomQ91JmcTh8l8HE63+XF52dEIUrjO4AZp1NhYb4ZGpX//oipRg0MavnjkZ7NKUoSviiph9UlwSm5p9O/caAW1SH4e1SWq3tncionq4d3QI+vkvVgJ6u3lZ09zWfJOkvV26cMcoqi06tHKxFRb8cgJxERERFRhFAOHwp1kNNi9+7xGav3/ZLCqFFhZoZ3tp5BLeDq/rGI0rT/UkQlCF4l60ct9k7stu852eBEo1OePVdhdeG/B2qxv8bWpWt3VI7snclZ0KX7dSRcQU53yfoVXuv9+zPI2R7l1wfAknUi6nsY5CQiIiIiihDKgT+VVmdIS06V/TgNagEGtf+XFIUJelmgUi0AC/PNSDAENlwmz6STHR+rd0CM4BLaQ3W+A5l2UcLSY/VYfrIBriA//vbK1SVJ6tZydcB3kDMU5eoAMHTolbJjjcaArKwpIbl2pNLrzV5rDHISUV/DICcRERERUYRIUgQPHSJQ5yP7Mli1NnmQM07ffrBSEARckWfGhBQjhsXr8aOBcciK0bb7nLZyFX05rS4J5WHoM9obSJKEg3XtZ6puqbBi8aE6NDg6/3eqDHK2LVdvbCyH3d4gezzcQU6t1jvLNxSZnACQmzsDAwZc6DmeOvVBaLXGkFw7UqlUGuh0Jtkag5xE1Nd4dwknIiIiIqI+KUargl4twNZmMnel1dVhMDJQtXZlP86OcyZ0agEz+3kHtAIRq1MjQa9GdZvg6jGLA+lRgQdK+4oKq8srIJ1n0uKoog/pqUYn3jtSh5sGxUHlZ2iTL+315FRmcarVesTGZgV87WD4LlcPzT0FQYVrrvkQR4+uhNGYgH79xofkupHOYIiD3V7vOWaQk4j6GmZyEhERERFFCEEQfJash4pXJqefoUOh5NWXM0KHDx1SZHGadSpc3d+M+VkxUMxfQnmzCzsqrZ26fns9OZVBzvj4fAhCeF8qKoOcMTFp0GgMIbu+RmNAQcGFyMycAKETweBzWUd9W4mIejtmchIRERERRZAkgwYnG1sDm6EcPqTsyRmqDNH25Jm12N4moHey0YFGh4jSJieO1dtxrN6BOrsLWTFaLMgxwdjBQKPe6mCtvB9nQawOgiBgZJIBaVEafHjUIhv8tLa0CUPi9R0OcGrRXk/OqqrunawOADqdPLs3VKXqFDwGOYmor+ubPwEQEREREZFPyr6clc2hCXJKkoQ6W+fL1bsqO0Yre9EiSsBzu6vxfrEFWyusqLS64BCBYouj09mNvUWd3YVyxd/TwNjWoUtpURpckqPol+iSsOZ0U8D3aK9cvapqv+yxcE9WBwCVRh7kjDFnh/2e1D4GOYmor2OQk4iIiIgogiQZwzNh3eqSYBPl1+mOTE69WoWM6MAK0E419s1S9sOKUnWDWvAa0JQdo8WQOPm0+Z1VVpQ1BdaOwF8mZ3X1ERw48KnsscTEgQFdsyucsaPlx/GTw35Pah+DnETU1zHISUREREQUQZIM8oCgU/IeGBQMZam6AMDUDZmcAJBn1nV8EiAr5+5LDtbKg5z9zTqfQ4Vm9ouGVvEp//ZkQ0BBbGUAy2argyRJWLHidxDF1uCwWq3DwIEXB775IKkyLoc6/ycQYgZClbsIdSlXhSQYT8FjkJOI+joGOYmIiIiIIki0RkCURh4gK2noeoZjraJU3axTQd1NA12Gxuu9hu+oACQqSvMtjr4X5LQ6Ra+/n4FxvoO6Zp0ak1KjZGsnG53YW2PzeX5bynJ1SRJx7NhK7Nnzrmx93Li7YDZnBrL1LmlwqaEpfAy6WeugPe9x1It6r5J96l7egfDaHtkHEVGwGOQkIiIiIooggiAgW1HqXGyx+zk7cHXKoUPdMFm9RbxejWsGxGJ4gh7jkg24Mt+Mn5+XiIV5Ztl5NpcEm6tvBTqPWOxom7+oEYA8k//M1fEpRq9eqCtPN8Huaj8LUlmuDgBffPEz2bHBEIfp03/X8aZDwFfWrXL4EnUvZnISUV/HICcRERERUYRRlncfq3dA7GIpsDKTM1bfvS8lsmO0uDjHhNmZMRgQq4NOLcDso1y+r5WsH1T048wxaaFTpq22oVEJmJ0pH9rT4BCxobz9IUR6vdlrrbJSPnBo6tQHYTQmdLTlLhMlCfU+sm6VnwvqXgxyElFfxyAnEREREVGEyTPJMzltLgmlAQ6o8UfZk7M7Mzn90agERCtK8/tSkNMpSl5ZtgPj9B0+b4BZ5/V3vPlMM2ps/su9VSo1dDqT38djY7MxYcLdHd47FOodInyF3CutLlRbWbLeUxjkJKK+jkFOIiIiIqIIY9apkazoV9nVkvVaRQCtOyarB8KsCLYqy+p7s+P1DigTGgcEMGRJEATMyYyWvZhzSe4hRO1R9uVsa+bMP0GjMXR471BoLxB9qI4l6z3FYIiXHTPISUR9DYOcREREREQRSFmyftQS/PAhUZK8AlPKvpA9RVmy3peGDx1UBPQyozWIVo5P9yPRoMHYFKNs7YjFgSPtlHz76ssJAGlpI3HeeTcEdN9QsLQTiGbJes/xlcnJifdE1Jf0jp9MiIiIiIgopJTlzKVNTjQ7gwsAWuwilM/sDeXqAGBWBAX7Srm6JEk4rAjoFcR2nMXZ1pQ0o1e5/renGuASfQemlEGsFhdc8HcIQve9NKxr5+/oVKMTDX0oUB1JlF8fouiEw9HYM5shIgqCpqc3QEREREREoZcVo4VGAJxn410S3AOIhsR33PNRSdmPU6cSYNT4H47TnZTl6u1lCfYmp5ucaHTKg5EFsZ37u9GrVZiREY3PS1rL1GtsIrZWNGNCapTX+b7K1fv3n4f8/Dmdum9XdRSIPlRnw6gkY7vnUOj5CoJbrbXQ6WK6fzN0zqivL4XNZoHLZYcoOuBy2eFyOfweGwzxyM+fDa3W+3scEYOcREREREQRSKMSkG3SorhNmXqxxR5UkFOZeRerU0EQekuQs29mch6slWdxJhnUSDB0Pju2MEGPHZVWnG4zWGpdWTOGJRgQo8hy9S5XFzBnzt86fc+usjjaD0QfrLUzyNkD9Hqz15rVWguzObMHdhM4SZJgsZyA2ZzZrRnJ5G3Pnv9hzZo/wWRKxyWXvIS4uFy/59ps9Xj77Qtx4sS6Tt8nI2Msbr11I1Sq3lFRQL0HvwMQEREREUWoPJOiL2e9I6gee7116BAAxCoyOesdIsRe3kdQkiTsr5X34+xsqXoLQRBwQWa0bM0uSlh12rvMODl5qOx4xIgbkZY2Iqj7doUyEN3fLG+tcLzBAaurbwSrI4lKpfYKdPb24UNWax1efnkMnn46B//85yBYLCd7ekvnrLq6E1i69CacOVOEI0e+wXvvXd3u/zdr1jwWVIATAE6f3oqSkrXBbpUiGIOcREREREQRKl8RPGpwiKiwdr6c2yvI2UuGDgHemZwS3IHOcKq2uvBdaRP2VFuDCqiebHR6ZccOiut8hm2L9GgtzkuQP393tQ0nG+TDpkaPvg3p6aMBABkZ4zB37hNB3zNYko8hViOTDFC3SQwWJaC4LvhBWRQ8X8OHerM1a/6EsrIdAIDq6sP44ou7enhH564DBz6B02n1HJ8+vQUnT270ea7TacOOHa926X6Vlfu79HyKTCxXJyIiIiKKUAl6Ncw6lSyodNRiR4qxcy8DlAG53pTJaVQLst6jgDtTUJnhGSpNThGLD9Wh4ewQpzq7iMlpnesNt7vaKjtONKiRauzafs/PiMaBWjtsbYYOfXuyETcOioXqbGuBmJg03HbbZlittTAaE3qk5YDVJcGuGIyUbNAgR9Fa4WCdDUMTgg/8UnAMhjjU1ZV4jntzkNPptGHnztdkawcOfIwTJzYgK2tSD+3q3FVcvMxrbdu2F33+Xezb9yGam6u81tVqHVQqLdRqHdRqbZtjLRoaymGz1XnOrak5GtoPgCICg5xERERERBFKEATkm3TYWdUaVCu2ODAhtXPXUQ4e6i2T1QH3xxirU6OqTbape/iQ1v+TuqCoyuoJcALApjPNmJBihFoVWMDQKUrYr+jHWRiv73LAMVqrwpT0KKw41VqmXtbsRFGVDSOSDJ41lUqNqKjELt2rK3z1TDVpVRgYq1f0j3XAKUrQBPh5pdDoS5mc+/cv9RkoW778N7jpplW9pm/wuUAUnTh2bKXX+u7d72LevKdgNCbI1rdvf1l2nJs7AzfeuKLdv7Nly36N9esf9xzX1hZ3cdcUiUJeZ7J69Wo888wzWLp0KUSRfVSIiIiIiHpSnqJk/WSjA3ZX4CXWdpeEJsUU8Fh97ylXB7xL1pWZp6F0QBGgtLkkHK0PvLT6cJ0dNsXnf1iIMhbHJBuQqBhetKq0EVZn73ldVqcImJu0KqhVgldPUrso4VgnPq8UGn0pyKkMlLU4fnwNjhz5upt303mSJOLgwc+xceMzOHNmT09vp0tOndoMm83ite5y2bBz5+uytcrKAzh2bJVsbcyYH3cYlI6Pz5cd19QwyEnegvrp5L///S9Gjx6N7777TrZ+9913Y9asWbjvvvuwcOFCzJ8/Hy5X53v+EBERERFRaOSYtGj70tElAScaAg8eKbM4Ae9hPz2tuyas19ldsinmLfbV2Hyc7VuRolQ9J0YLc4g+n2pBwJx+8iFEzU4Jy042BjVwKhwsin6pLX930VoVMqPlhYYH6wL/vFJo9JUgZ1XVIRw9usLv48uXPwhJ6j3BfV82bXoWS5Zcgq+//jn+9a9CLF58MY4dW91r/q12xpEj3qXqLbZte1H2MW3bJg9OR0UlYfDgyzu8R3x8nuyY5erkS1BBzvfffx9HjhzBuHHjPGtbt27F888/D4PBgEsvvRT9+vXD8uXL8c4774Rss0RERERE1DkGtQr9FMGj4nq7n7O9KYcOxWhV0PayEmJlkNDiCE+ixX4/wcxDdXY4xY4DE40OEUct8gBzYYj7TuaZdRioyIrcU2PDjkqrn2d0L2UA2qxtfUmqzOY8XGcParATBU+vj5Md99Yg5/bt/1asyL8nlZXtwJ4973XfhjpJFJ347ru/yNYOHfoCr78+A//5z0Ts3fsBRLHvJIz56sfZoqrqoCdz0+m0YtcueWbnyJGLoNF0/H1Qmclptdagubmm85uliBZUkHP37t0YPnw49PrWL8R33nkHgiDgzTffxIcffojNmzfDYDDg1Ve7NjGLiIiIiIi6Jt8sDx4pA23tqVUOHepFk9VbtA2UAeHL5FSWqrewixKKLR0HjvfV2NB2ZxoBGBin83t+sGb1i4ZOEYj+9lQjTjX2fPm3RZEZ3DZAPVAxYb7JKeFUo3fmLIVPX8jkdLnsXgOHxo+/G0lJQ2RrK1f+Hi5Xz3/N+3L06Eo0Np7x+dipU5vx3ntX4vnnB2Pr1hfhcDR38+46x2azeE1RV6vl/5a3bXsRgO+BQ6NH3x7QfWJjsyEI8u/1tbXM5iS5oH5CqaqqQmZmpmxtzZo1MJvNuOyyywAAaWlpmDZtGg4fPtzlTRIRERERUfCUfTmrbS6vDE1/lOf1tlJ1wHe5eqhLPv2VqrcIpGR9d7X8nEFxeujVoQ8ax+nVuDgnRrYmSsBHR+vR6OjZEl6vTM42f3fxejWSFT1Fe0Ng9lzSF4KcBw58gqamCtna2LE/waxZ/ydbq64+jB07emfS1e7dSzo8p7r6MD7//E48/XQO1qz5E5qbq7thZ5137NgqSFLr/xNqtQ7nn/+w7Jx9+z5EQ0M5tm17SbaelzcLiYkFAd1HrdbBbJbHoViyTkpB/Y/qcDhkvTZtNht27dqFyZMnQ6VqvWRycjLOnPH92wkiIiIiIuoeaUYNjBp5Zt/RAEvWlYNi4nrZ0CHAO/BqFyWv4T5d5a9UvcVhix2OdkrWK5udKGuWB0lDNXDIl0FxekxMMcrWGhwiPj5W36Ml4MqvJ+XfXVqUvLVCuLJyybe+EORU9nTMzp6G5OQhGDz4MvTrN1722OrVf4TD0dSd2+uQ02nDvn0fytYGDrwEcXG5Ps9vaqrAypUP4amnsvHVVz9Hbe3xbthl4IqLv5UdZ2VNxtixP4FG0/r9RxSd+PbbB3D8+BrZuaNH39Gpe3H4EHUkqJ9QMjIysGdP6/Sv1atXw+FwYPLkybLzLBYLYmNju7ZDIiIiIiLqEkEQkGfy7ncYSLajd7l678vkNGm9X9aEesK6slR9gFkn6wLoEIEjdf4Dx7sVQdIYjQq5Jq2fs0NjekYUcmLk9yhpcGDV6Z4J+jhFCY1O+decMgtXeawMilJ49fYgZ01NsVf/xzFj3IEyQRAwe/ZfZY81NJRi8+Z/dtv+AnH48Jew2epkaxdd9ALuvvsQFi58B+npo30+z+FoxKZNz+C55wZg587/dsNOA6P8+8jLmwOjMR6FhdfK1nftekN2HBWVjCFDOh441FZcHIOc1L6ggpwzZszAgQMH8Ne//hW7du3Cww8/DEEQMH/+fNl5u3fv9iprJyIiIiKi7penCKgdsTjwfrHFq0diW5Ikoc6mzOTsfUFOtUpAjLIvZwiHD/kqVR+dbEC2IoC4r9Z3tqckSdijKFUfmqCHSgjvACeVIODSXJNXEHjzmeYOM1PDod5HqbwyqKnM7GQmZ/fq7UFO5cAhgyEOQ4Ys9Bzn5c1E//5zZed8991fetWAGmWpenb2NMTGZkGl0qCw8BrcfvtW/OhH33p9HC1E0Ymvvvo5nM7u/zesZLGcRGXlftla//4XAHC3EGjPyJGLoFZ3riexcsI6e3KSUlBBzgcffBAxMTH43e9+h9GjR2PTpk2YM2cOxowZ4znn4MGDOHr0KCZOnBiyzRIRERERUXDyFJmHgDvQ+e99tdhe0ewzq7PRKUGReNcrBw8BQKyPvpyhogwIGtQCckxaDImXl5sfqbPD7qNM/niDwyvAF+qp6v5EaVW4PM8EteIv/4uSBlRZu3eojzIrU68SYFC3n8lp6eEeoucaX0HOUPe3DZbL5fDqsXneeTdCq5W3ZZg168+yY6u1FuvX/z3s+wuE3d6AAwc+la0VFl4nOxYEAfn5s/HDH36NH/94B4YPvwGCIA/+22x1KC3dFvb9duTIEXkWp8EQj/R0d1woI2Mc0tJG+X3umDGBDRxqi+Xq1JGgfkIZMGAA1q9fj5tuugkXXnghHnnkESxdulR2zvLlyzFixAhcfPHFodgnERERERF1QYxWhQmKHo2Au3/lNycb8fahOlRb5UEo5dAhtQCvjMneQjlhPZTl6vsVpeoD43RQCwIGxelkL6ickrsNgJIyizPFqEaKUeN1XrhkRGtxQaZ8EJFdlPBFSUO39udsb+iQZ02rCOa4JFhdDHR2F2WQU5JccDgae2YzCgcPforGxnLZmq9AWUbGGAwdepVsbePGp1FfXxrW/QVi//6P4XS2TksXBDWGDr3S7/lpaSNxxRVv4Z57jiA+vr/ssePH14Ztn4HyLlWfBZXK/W9YEAS/2Zx5ebORkDCg0/dTBjlra49BFNnSgloF/RPKsGHD8Oqrr+Kzzz7DH/7wBxiN8h+Y7rzzTuzYsQMXXnhhlzdJRERERERdN6NfNC7LMyFa410mfbLRif/sr8H+NiXXtcqhQzo1hDCXWAfL7FXmHJoXvnV2F0oVpepD4txZmEYffTWVJesOUfLq5zksvnuyONsakajHcEX26KlGJ7ZWWLttDwEFOX2s1bNkvdsog5xA7ylZ3779FdlxVtZkpKQU+jx35szHZNmPTmcz1qx5LKz7C4SyVL1//wsQHZ3c4fPi4nLQv/882VpJyRo/Z3cPSRK9hg7l518gOy4svA46ncnruWPG/Dioe8bFycvVRdGB+vrTQV2LIlPv/DUsERERERGFxeA4PW4fEo/zfJRLuyTg02P1ONHgAADU2uTBpdheOFm9hVeZc4gCY75K1bPbBDYHKwKWxRa7J/PQJUpYdboR9jZT1wUAwxIMIdlbZwiCgLlZMYhX/B2uOd3olcEbLsrAszIwDQAaleAVhA/1ECnyT683e631hiBnbe1xHD78tWytvcncSUmDMGrULbK17dtfQXX1kbDsLxBNTVU4ckT+MShL1duTkzNddlxSsq5HsxjLy79HU1OFbK2lH2cLvd6E8877oWwtOjoFgwdfGtQ9o6NToNVGydZYsk5tdfmnFJfLhTNnzqCkpMTvGxERERER9R4GjQoX5ZhwbX+zVy9LlwR8UGxBtdXlM5OztwpXL0d/peqe41idrN+lSwIO1dpxptmJ1w/WYpsiUzLXpO2xkn+tSsBF2fKsKqcEfFFS3y1l68q/E+XXXotwZeVSx1QqtVegszcEOQ8f/gpA69eoXh+LYcOu8v8EAOef/wdoNK2/UBBFJ1at+kO4ttihffs+gCi2ZoVrNAYMHnxZwM/PyZkmO7bZ6nDmTFGottdpyn6c8fH5XuXkADBp0n2ybM6pU3/b6YFDLQRBYF9OalfQ/7tu2bIFF154IUwmE9LT05GXl+fzLT/f+4uciIiIiIh6Xq5Zh1sHx3sNwbG6JLxXXIdyRZl2b5ys3kLZy7HBIcIldi1wV2vzX6rewqBRIc8kf8H+XVkTXj9QizPN3sG5scnefVG7U1aMFmOT5ZmkJxudXsHYcFAOHlL+nXnWOXyoR/XGCevKYN6AAfO8MvqUzOZMjBt3l2ytqGgxysp2hnp7AVGWqhcUXOwzc9YfkymjV/XlVPbjVJaqt0hIGICbb16NKVN+jcsvfwsTJtzbpfsqS9Y5YZ3aCqrb9caNGzFr1ixYre7/COPj42E2B/6Pk4iIiIiIegedWsBF2TFodoo4YnF41mts3oGl3jpZHfCdFVjvELsUmD1Q236peosh8ToctrRmfPoqr1YBmNkvGv1jg8tgCqXp6dE4XGdHbZt9rj7diP5mHRIM4QlkS5IUUE9OwHuIVKhaD1BgDIY41NW1VmT2xiBnSsp5AT1v6tTfYPv2l2GzWTxrK1b8Dtdf/3lI99cRi+UUjh1bLVvrTKl6i5ycaaipaS25LylZiwkT7u7y/jrL6bSipEQeYPUX5ASA9PRRSE/3P2m9M5jJSe0J6qeUhx9+GFarFbfccgtKS0tRVVWFo0eP+n0jIiIiIqLeSyUIuDTXjFRj+wGu2F5crq5XC9CplL0cu1bmrCxVH6QoVW8xIFYHH7OcPJINatw4KA7jfEy37wnuwLbvsnUpTGXrTU4JLsWl/QY5Wa7eo3pbJqckSSgvlwc5U1OHB/TcqKhETJ78gGzt0KEvuj0Dcs+e/6Ftub1OZ0JBwUWdvk52trxk/fjxNWH7N9uekpLv4HS2Zn8Lggp5ebO65d4MclJ7ggpybtq0CYMGDcIrr7yC1NTUUO+JiIiIiIi6mU4t4Mr+Zpja6RcZ14sHDwmCENLhQ75K1QfH+Z6KrlerkG/2naE5IcWImwbFIS0qqCK6sMk2aTE6qfvK1pWBShXgtzdpuIZIUWB6W5Czvv40rNYa2VpKSmBBTgCYOPFeREfL4xbLl/+2W4ODylL1IUMuh1bb+V96KIcPNTaWo7r6cJf2FgxlP86MjLEwGuO75d4sV6f2BPVTitPpxMiRIyH4+C0mERERERH1TSatGlf1N3tlRAKAUSNAr+69QU7Au2S9K70cAy1VbzFa0ecyVqfCDQWxmNkvGhofn8/eYEZGtNfnbHVpY5czYH2pU/xdmHQqqPy8nlRmDNc7RLh6IFvtXNXbgpzKUnWtNhpxcTkBP1+ni8H06Q/J1k6cWIdDh7qnZL26+jBOn94iWwumVB0A4uP7IyYmTbamLBsPp8bGM9iw4Sns2vW6bL29UvVQU2ZyNjSUweFo6rb7U+8W1E8pgwcPRmVlZaj3QkREREREPSzFqMFleSYow0+9ebJ6i1CWOQdaqt4i16TDJTkx6G/WYlp6FG4ZHIesGP9B0d6gpR9rWw4RYcnmDLQfp6/HJLgHSVH30OvjZMc9HeRUlqqnpBRCEDoXyhgz5navDMDly38LUQx/K4Tdu9+RHUdFJSEvb3ZQ1xIEwWfJeji5XA7s378U77xzGZ58sh+++eY+NDaWy87p3iBnntdaTQ2zOcktqCDnHXfcgbVr1+LIkSMdn0xERERERH1KvlmHeVny4Fd/P+XYvYlyYI2vAUCB6EypeluFCQZc1T8WU9Kien3Wa4sckw4jEuUf264qKxxdnEyvpAw4+5usDgBGteDV45Ql691HWXbc00FO76FDgZeqt1CrdZg581HFdXd7lZGHmiRJXvcYOvQqqNXB/wJEWbIerkzO8vLv8dVXv8CTT/bDu+9ejgMHPoYoOr3Oi4lJQ1bWpLDswRetNsqr/QBL1qlF0EHO6667DhdccAG++OILuFxsBE1EREREFElGJhlwWZ4JA8w6TE41YkJq7xia055Q9XJUlqobOyhV7+smpETJjm0uCXuqbX7ODo4y4Kwsk29LEASvkvVwlNCTb97l6jW+T+wmyiBnoEOHlAoLr/MKkK5c+Qe4XHY/z+i6M2eKUFGx12sfXaHM5KypKYbFcqpL12zR1FSFTZuew8svj8GLL47Apk1Po6mpwu/5cXF5WLhwCdTq7v0lGIcPkT9Bdb/Oz3d/QR07dgwLFiyARqNBeno6VCrv/6gEQWDGJxERERFRHzQ4Th9QBmNv4atcXZKkTs8SUJaqD+ygVL2vSzCokW/Sorje4VnbVtGMEYn6kM1h8Mrk7KD9gVmnQpWt9TnM5Ow+vaknpyg6UVGxT7YWTCYnAKhUasye/WcsWbLAs1ZbexTbtr2C8eN/1qV9+lNUJM/iNJszkZ09pUvXTEkphMEQJ/t7KSlZi8LCa4O6nig6cfjw19i58zUcOPAJRNHR7vkajRFDhy7EyJGLkJs7o9OtA0IhPj4fJ09u8BwzyEktggpyHjt2zPNnSZLgcDhQUlLi81wOJyIiIiIiou6gzOR0SkCzU0KU1v2apM7uwhfHG2BxuDAu2YjRyd7ZqcGWqvd1Y5KNsiBnhdWFEw3OkGWwdqYnp6/HGeTsPr0pyFlVdQgulzyrONhMTgAoKLgYWVlTcOLEOs/amjWPYeTIm6DTxbTzzM6TJAl79sj7cQ4bdm2Xg4IqlRpZWVNkg5OOH+98kLOiYh927nwN33//Jhoayjo8PytrMkaOXIShQ6+CwRDb6X2HEieskz9BBTmPHuUXEBERERER9S4mrQoC3INqWlgcIqK0KkiShI+K61HW7A5gfnOyEQkGNXJN8jLLc61UvUW+WYt4vQo1ttZg4rbK5pB87HaXhGaXvMdnx0FORVaug+Xq3aU3BTmVpeoxMWmIikoK+nqCIGDOnL/itddaS74bG8uxceMzmD79d0Ff15eTJzeitvaYbG348K6VqrfIzp4mC3KWlAQ2fMhqrcXu3e9g587XcOrU5g7PN5n6YcSIGzFy5M1ITBwY9H5DjeXq5E9QQU5BECAIArKyskK9HyIiIiIioqCoBAEmrQqWNpO46+wupEVpUFRt8wQ4W6w41YibB2mhalN9dq6VqrcQBAGjk4xYfqrRs3aw1g6L3dVhaXlH6n0EKNsbPOR+nJmcPcVXkDOYtg+hcObMbtlxsKXqbWVnT0VBwUU4dOgLz9r69Y9j7NifICoqscvXb6EcOJSYOBBpaaNCcm3l8KEzZ3ajubkaRmOC17mi6MLRo8uxc+dr2LfvI6/MWCW1Wo/Bgy/DyJGLkJ8/BypV1/79h4OvIGdPfY1S7xJUnnRubi6uvTa4fg9ERERERETh4qvM2eYSsfp0o9e5Z5pdKGozYOdcLVVvMTxBj7axRQnAjkprl6+rHDpkVAvQqdsPRvj6e5Sk0E58J9+UQU5JEmG3N/TIXkIxWd2XWbP+LDu22Sz47ru/huTagLvP5Z49/5OtFRZeF7IgXEbGGGg08nYbJSXfyY4tllNYvvx3eOaZXLz11jzs3v1OuwHOfv3G46KLXsD995fiyivfwYAB83plgBMA4uPl5eoOR1O7A5Lo3BFUkNNsNiMvL6/jE4mIiIiIiLqRciq3xe7CxvJmNDp9B8jWnG6EzeUOwvkqVc85B0rVWxg0KhQmGGRrO6uscIpdCy52th8n4P33aBcl2FwMcnYHZZAT6LmS9fLy0ExWV0pLG4Hhw6+XrW3Z8k9YLCdDcv1jx1ahsbFcttbVqeptqdU6ZGZOlK0dP77W8+f9+5fi+eeH4Lvv/tzuxxQdnYpJk36JO+/cjdtu24Rx4+6E0Rgfsn2Gi8nUDyqV/HszS9YJCDLIOXToUJw4cSLUeyEiIiIiIuoSZQDtRKMTm880+z2/0SlhU7n7cV+l6qpzrPxxdJI8yNnslLCvpv3y1rYkSfLKuOzsZHXA3V9VSZkRSuGh15sByL/ueyLIabc3egWuQpXJCQAzZjwKlaq1g5/TacXq1Y+G5NrKqeppaaOQlDQoJNdukZ09TXZcUrIWoujC8uW/w7vvXg67vd7n81QqLYYMWYjrrvsU9913EnPn/h0pKcNCurdwU6nUiIvLla0xyElAkEHO22+/HevWrcOWLVtCvR8iIiIiIqKgKYOcZU1OtE0AVAFIi5KPJth8phklDY5zulS9RbJRg5wYeYbUtgprQKXiG8ub8MSuKvxrTw0O1bUGRpXByUAyOdUqATHKvpwcPtQtBEF1NtDZqieCnBUVeyAfIyYgOXloyK6fkNAfo0ffIVvbseNVVFYe6NJ1nU4b9u37QLYWyizOFjk58iBnaek2LF58Eb777s8+z09LG4X585/F/fefxtVXv4+BAy+RBXn7Gu++nByQTUEGORctWoSf/vSnmDt3Lv785z/jwIEDsNkC/+0eERERERFROHQ00GZ0sgGXZMfI8tScEvBBsUV23rlWqt7WmGR5NmdZsxOnFQFgpVqbC6tON8EpuSfaf1Bcj60V7gxZZXBSWYruT6yPvpzUPXrDhHVlqXpCwgBotUY/Zwdn+vTfy3pbSpILK1c+1KVrHj78FWy2OtlaYeE1XbqmL5mZk2RBSlF04siRb7zOGzbsGvz4xzvx4x9vx4QJd3dpOn1vEhcnb6HITE4CggxyqtVqPP/887BYLHjooYcwdOhQREVFQa1We71pNH33NwNERERERNS3tJclaFALmJIWhSSjBqMUZdnKfo/nYql6iwGxOq/P47aK9gcQnWhweK19e7IRy082eGdy+ihF90V5HsvVu09vCHIqhw6Fqh9nWyZTOiZO/Llsbe/e93D69Lagr6mcqp6dPRWxsdlBX88fnS4a6emj/T6uUmkwf/6zWLhwCdLSRoT8/j1NmclZW8sgJwUZ5GzpsxLImyjyPyIiIiIiIuoe7QU5p6VHwahxPz41LQp6lf8g5rlYqt5CJQhevTn319rQ5PD/2q682Xem55YKq1cGpjJD0x9l705lb08Kn94Y5AxlP862pkx5AAaDfNjOihUPBnUtu70BBw58IlsLR6l6i+zs6T7Xo6NTcOONKzBhwt0hm+je27BcnXwJKsgpimKn3oiIiIiIiLqDXq2CQe39oj7JoJZlb0ZpVZic5rv09VwuVW8xItEATZtPoygBJxq9szVb+Aty+hLI4CH3eSxX7ym9IcipLFcPV5DTYIjD1Km/ka0dOfINjh5d0elrHTjwCZzO1kFngqDG0KFXdXmP/uTmzvBa69dvAu64Y7tXz85IEx8vL1e3WE7A5bL7ObvvqajYF1AvZJILKshJRERERETUW/nK5pzVL9qr/HxMstFnVuG5XKrewqhRIVMxgEg5mKmFJEk40xRYlqVaAKI0gX1uGeTsOT0d5GxoKEdTU4VsLRzl6i3Gj78LJlOGbG358t92OsikLFXv3/8CREcnd3l//hQUXIisrCme49Gj78DNN6+G2dwvbPfsLZSZnJIkoq6upId2E1oHDnyKl14ahWXLHmCgs5MY5CQiIiIioogSr5dnCvY3a5Fv1nmdp1EJmJkR7bV+Lpeqt5WumEJf2ug7yFlnF2ET5S/EL86O8dkOwKxTBVw+qxwi1eAU4RT5gr879HSQ88yZ3bJjjcaI+Pj+YbufVhuF6dP/IFs7dWoz9u9fGvA1mpurcfjw17K1cJaqA4AgqHDzzavwox99i7vvPowFC16CRnNufP8yGOK82gxEQsl6UdESvPvu5XC5bNiw4R9Ys+axnt5Sn8IgJxERERERRZTRSQbPC50YjQpzMmP8njsoTof8NqXpaUbNOV+q3iJNEeQsa3b6zCoqU5SqGzUCChP0uGFgrNfwoGRD4INpfWXZNrTTF5RCRxnktNlqu/X+yn6cyclDoVIF1uYgWKNG3YKEhAGytRUrfgdRDCxLee/eDyCKrS0dNBoDBg++LJRb9Eml0iA/fzYSEsIXBO6tlCXrfX3C+vbt/8aHH94ASWr9mlu16mEcPPhZD+6qbwl6unqgb5yuTkRERERE3SnHpMOtQ+Jwaa4JNw2O9crsbEsQBFyeb8acftE4Pz0KV/U3n/Ol6i2UmZw2l4Qam3eQ8YyijD3VqIEgCEgxavCjQbHIjHZfx6gRMCnVdx9UX/RqATpFNmhdJ4YPVVtdDIoGqaczOZX9OMNZqt5CrdZi5sw/ydYqK/fh++/fDOj5ylL1goKLodebQ7Y/8uY9fKjvBjk3bHgKn356OwD5L5JGjrwFAwZc2DOb6oOCikB2picA+wcQEREREVF3SzRokBhg1qBWJWBsSuDBt3OFSatCtEZAo7P1NV1pkwMJBnnQWDl0KNXY+nk3adW4oSAWdXYRURoVdD6GQvkjCALMOhUqra2BzUD7cn59ogE7Kq0QAFyYHYPzEg0dPoda9XSQs7smqysNG3YV1q37G8rKdnjWVq16GIWF10Kj8f81VF9/GseOrZKthbtUnYC4OHmQs7a275WrS5KENWsew6pVD3s9Nn78PZg//ykIAouwAxXS6eoulwvFxcV49tlnER8fj4cffpjT1YmIiIiIiPogQRC8StZ9DR8qVwwdSlU8RxAExOnVnQpwtlCWrFsCyMwsb3JiR6UVgDsn6ruypk7f91zXk0FOSRJRUbFHttZdQU5BUGH27L/I1urqSrB164vtPm/Pnv+hbQaeTmdCQcFF4dgitdHXy9UlScKyZb/yGeCcNu33mD//aQY4Oymkny1BEJCbm4u77roLH3zwAR577DF88MEHobwFERERERERdZP0KHl/0jJFkLPRIaLBKQ88phpD1zvRrJNfyxJAufrBOpvsuN4ussKwk3oyyFlTUwyHQx6Y7o5y9Rb9+89FTs75srW1a/8PNpvF73OUpepDhlwOrZbZ4eHWl8vVRdGFzz77CTZseMLrsTlz/oZZsx4LeEgbtQpbSHjGjBkYNWoUnnzyyXDdgoiIiIiIiMJI2ZezvNkJsU3AUFmqrlV5T7fvCuXgoroAytUP1dllxxIA1hd2jq8gZ3cFipX9OKOikhAdndot9wbcyVvKbM6mpkps2OA7tlFdfQSnTm2WrbFUvXsog5xWaw2amip7aDeBc7kcWLr0Rmzf/rLXYxdd9AKmTHmgB3YVGcKa95qfn4+ioqKOTyQiIiIiIqJeRxnkdIiQ9cgsV2R2phg1IR3cZFaWq3cQ5Kyzu3Cm2Tvb08UoZ6cog5ySJMJub+iWe3v34yzs9oy2rKxJGDToUtnahg1PoLGxwuvc3bvfkR1HRSUhL292WPdHbrGx2VCr9bK1/fs/7qHdBMbptOK9965CUdFi2bogqHHZZW9g3Lg7e2hnkSGsQc5Dhw6xLICIiIiIiKiPitKqvAKNbftytjd0KBR8lau39xrzsCKLs4WTr0s7RRnkBLqvZL2nhg4pzZr1fwBag6t2ewPWrv2z13nKUvWhQ6+CWq31Oo9CT63WoaBAPnl89+7Ffs7ueXZ7I5YsWYADB+SBWJVKi6uueg8jRvyoh3YWOcIS5HQ6nfi///s/7Ny5E6NGjQrHLYiIiIiIiKgbKLM52/blVGZNpoQ8yCl/yeqUgGan/4ClslTd8zyRQc7O0OvNaBvgA7ovyKksV++pIGdKyjCMGHGjbG3r1hdQW3vcc1xeXuQ1JIml6t2rsPB62fHRoytRX3+6h3bjn9Vai7femovi4m9l6xqNEddd9ymGDLm8h3YWWYL6H2jWrFl+H6uvr0dxcTFqa2uhUqnw4IMPBr05IiIiIiIi6lnpURocqG0NHrZkctpdEqptysnqoevHCQAmrQoC2s6tdk9Yj9J65+tYXSJKGhw+r+NijLNTBEEFvd4Mm63Os9YdQU6HoxnV1Ydka905dEhpxoxHUFS0GKLo/rpyuexYvfoRXHrpawC8szjN5kxkZ0/p9n2eywYOvAQ6nQl2e/3ZFQm7d7+LSZN+0aP7aquxsQJvvTUPZWU7ZOs6nQnXX/85cnKm9dDOIk9QQc5Vq1Z1eE5BQQH++te/Yv78+cHcgoiIiIiIiHqBNEUm55lmJ5yihDOKUnUBQLIhtJmcKkGASauCxdHaVLPO7vLaEwAUWxzwl7DJTM7OMxjiuj3IWVGxB5Ikb6CanDws7Pf1Jy4uF2PH3onNm5/1rO3a9QYmT/4VkpKGePXjHDbsWghCWLsCkoJWa8SQIVdg167XPWu7dy/uNUFOi+UU3nzzAlRW7pOtG42J+OEPv0JGxtge2llkCup/oJUrV/p9TKfToV+/fsjOzg56U0RERERERNQ7KAOKogRUNDu9+nEmGdTQqEI/IMaskwc5/Q0f8tePE2AmZzCMxnjU1bWWZndHkPP48bWy44SEAuj1prDftz3Tp/8OO3b8Bw5HIwD3EKYVK36PKVMeQG3tUdm5w4ezVL0nDB9+vSzIefr0VlRVHURi4sAe3BVQU3MUb7wx2+vrJCYmDT/60bdISem5AH6kCirIef7554d6H0RERERERNQLGdQqJOjVstL00ibvIGeo+3G2MOvUQGPrvSx2H9PTJQlHLP6DnMzk7Dzl8CGrtSbs9zx+fLXsOCdnetjv2ZHo6BRMmnQ/1qx51LO2f/9HaG6ukp2XmDgQaWmcSdIT8vJmITo6BY2NZzxrRUWLMWPGIz22p4qKfXjzzTle/UFjY3Nw443fIiFhQA/tLLIFlUf9xhtvYP369R2et3HjRrzxxhvB3IKIiIiIiIh6CeXwodImJ8qbFJPVfZSQh0KsYvhQ26zOFicaHLC1k67J6eqd5x3krA3r/SRJREmJPJMzJ6d3JFhNnnw/jMZE2drx42tkx4WF10EQQp/JTB1TqTQYNuwa2VpR0WJIPfTvvrR0B/773+leAc7ExIFYtGgtA5xhFFSQ8+abb8a///3vDs/7z3/+g0WLFgVzCyIiIiIiIuollCXrpxqdqLQqhg4ZQzt0qIVywnqdj3J1f1PVW7h8V7hTO7o7yHnmzG40N1fL1nJze0eQU683Y9q09ocqc6p6zxo+/AbZcXX1IZSWbuv2fZw4sR6vvz4TTU2VsvXU1BG4+eY1iI3N6vY9nUvC2hG3p6LmREREREREFDrKTM5qm8urz2VquMrVtfLgqbJcXZKkDoOczOTsPL0+TnYc7iDnsWPyUvW4uFzExvaeWR/jxv0UZnOmz8fS0kYhKWlQN++I2urXbzzi4/Nla0VFi7t1D8XF3+LNNy+QDewCgH79JuCmm1YiJia1W/dzLgprkPPMmTOIiooK5y2IiIiIiIgozFKjNGivEDdWp4JBE56Xl8pMzianBEebHptnml1ew4g0is1y8FDndXcmp3c/zt6RxdlCozFgxow/+nyMWZw9TxAEFBZeL1vbvfsdiKJ3D99wOHDgEyxefDEcjibZem7uTPzoR8tgNMZ3yz7OdQH/qm3NGnm/ibKyMq+1Fk6nE3v27ME333yD4cOHd22HRERERERE1KO0KgFJBjUqrL4DBuHK4gS8g5wAUNbkRFaMFoB3qXqsTgWjWoWyNoOROHio84zGBNnxqVOb4HI5oFZrQ34vSZK8elz2tiAnAIwYcSPWr/87Kiv3y9YLC6/x8wzqTsOHX4+1a//kOW5oKMWxY6uQnz87rPctKlqCjz76ESRJ/v2xoOBiXHXVe9BqjWG9P7UK+H+iGTNmyJrofv311/j666/bfY4kSbjzzjuD3x0RERERERH1CunRGv9BzjANHQIAvVoFvVqQDRZ653AdZmREY2yyAYcVQc4BsTqvoUgulqt3Wnb2VNlxff1p7N//EYYNuzrk96qs3IempgrZWm/px9mWSqXBrFn/h//9b6FnLS9vVq8qqz+XJScPQVraSJSV7fSsFRUtDmuQc9u2V/DZZz8GIP8eM2zY1bj88jehVuvCdm/yFvD/RNOnT/cEOVevXo2UlBQMHjzY57k6nQ6ZmZlYuHAhLrrootDslIiIiIiIiHpMepQG31fZfD4WzkxOAOgXrUGxxeE5dknA8lONOFBrk2VsAkBBrA6VzfJgrJODhzotPX0UMjMn4eTJDZ61zZufC0uQU5nFaTZnIi4uL+T3CYXBgy/H9Ol/wObNzyI+vj8uvvjFnt4StTF8+A2yIOe+fR/g4oufh0ZjCPm9Nmx4Et98c7/X+siRt2DBgpehUoVnGBv5F/D/RKtWrfL8WaVS4cILL8Srr74ajj0RERERERFRL5Me5b9MOSVMk9VbzMuKwXtHLF4T3U82ygOcerWArBgttqiaZevM5AzOhAn3yIKcJSXfobR0O9LTR4f0Pr76cbatJO1NBEHAzJl/xIwZj/TaPZ7LCguvxbJlD6Als9Jmq8OhQ19iyJDLQ3YPSZKwevWjWL36Ea/HJky4F/PmPQlBCOsIHPIjqM/6ypUr8etf/zrUeyEiIiIiIqJeKtmghtpHTMeoEWDShvcFfaxOjZsHxWFccvvZWP3NOqgFAWpF8ImZnMEZMmQhTKYM2drmzc+F9B6SJHlNVu+N/TiVGODsnczmTOTkTJetFRW9HbLrS5KEb775pc8A5/TpD2HevKcY4OxBQX3mzz//fAwaNCjUextgStMAAN4WSURBVCEiIiIiIqJeSq0SkOKjLD3VqOmWgI9GJWB2ZgyuG2CG2U9QtSBW5zm3LWZyBket1mLMmJ/I1oqKlqCxscLPMzqvuvowGhpKZWvKIBVRZwwfLp+yfvDgZ7Ba67p8XVF04bPPfoyNG5/0emzOnMcxc+ajDH73sC6Fl9euXYurr74amZmZ0Ov1uPXWWz2PLVu2DA8++CDKysq6vEkiIiIiIiLqeek+BgyFux+nUo5Jh1sGx2FYvF62blALyDe7S+o1ijgDp6sHb8yYO2TDU1wuG7ZvfyVk11eWqkdHpyIxcWDIrk/nnqFDr4RK1dpew+WyYf/+j7p0TZfLgY8++pGPr30BF1/8L0yZ8qsuXZ9CI+gg52OPPYYZM2bg/fffx+nTp+FwOCC1+e1YbGws/va3v+HDDz8MyUaJiIiIiIioZ/kMcoZxsro/Bo0KC3JNuCzPhMxoDVKNalyaa4Je7X6Jq/bK5Oz2LUaMmJhUFBZeK1vbsuUFuFwOP8/oHGWQMze39/bjpL7BaExAQcGFsrWiosVBX8/ptOK9967E7t1LZOuCoMbll7+BsWN/4ueZ1N2CCnJ++eWXePjhh9GvXz/873//Q3l5udc548ePR3JyMj777LMub5KIiIiIiIh6XprPTM6emyA8OE6PHw6Mw6LB8cgzt2YbMpMztMaPv1t2XF9/qsuZcUDf7cdJvV9hobxk/ejR5Who6Hylsd3egMWLL8GBA5/I1tVqHa666j2cd94Pu7RPCq2ggpzPPPMM9Ho9vvzyS1x55ZVITk72ed6IESNw6NChLm2QiIiIiIiIeockgxpJBrXsOEHfc0FOf5jJGVoZGWORmTlJthaKAUS1tcdgsZyQrTHISaEwaNACaLXRnmNJErF797uduobVWou33pqHo0eXy9Y1GiOuu+7TkE5sp9AIKsi5ZcsWjB8/HsOGDWv3vOTkZPbkJCIiIiIiihCCIGBhvhnD4vUYFq/Hwnxzrywt1iinq3PwUJdNmHCP7Lik5DuUlm7v0jWVpepRUUlITh7apWsSAYBWG+UVhNy9O/CS9cbGCrz++kycOLFetq7Xm/GjH32D/v3nhmSfFFpBBTkbGxuRlpbW4Xl1dXUQRTGYWxAREREREVEvFK9XY0GuCQtyTYjvhVmcAKBRvNJluXrXDRmyECZThmytq9mcx4+vkR3n5EzvlUFz6puGD79Bdnzq1GZUVx/u8HkWyyn897/TUVa2U7ZuNCbixhtXIDt7aii3SSEUVJAzNTUVhw93/IVx4MABZGVlBXMLIiIiIiIioqCoBZarh5parcWYMfIBK0VFS9DYWBH0NZWZnCxVp1DKy5uNqCh5e8WioiV+znarqSnGa69NQ2Xlftl6TEw6br55NTIyxoR8nxQ6QQU5p06dip07d2LdunV+z/nss89w+PBhzJw5M+jNEREREREREXUWMznDY8yYO6BWtw54crls2L79laCuZbGcRE1NsWyNQU4KJbVai2HDrpatFRW9DclP+4qKir147bVpqK09KluPjc3BokVrkZLSfstG6nlBBTnvv/9+CIKAK664AkuXLoXT6ZQ9/tVXX+G2226DVqvF3Xff7ecqRERERERERKHHTM7wiIlJRWHhtbK1LVtegMvl6PS1lFPVDYY4pKQUdml/RErDh8unrFdVHUBZ2Q6v80pLt+O//z0f9fWnZeuJiYNwyy3fISGhf1j3SaERVJBz9OjReOKJJ1BZWYmFCxciLi4OgiDggw8+QFxcHC6++GKcOXMGTzzxBIYOZdNgIiIiIiIi6j5eg4eYyRky48fLBxDV15/C/v1LO30dZal6dvY0qFS9s8cr9V2ZmZMQF5crWysqkg8gKilZh9dfn4mmpkrZemrqCCxatAZmc2a4t0khElSQEwDuvfdefPHFFxg3bhyam5shSRLq6+thsVgwfPhwfPLJJ7jrrrtCuVciIiIiIiKiDqmV5eqcrh4yGRljkJk5Sba2efOznb4O+3FSdxAEAYWF8mzO3buXQBRdAIDi4m/x1ltzYbNZZOdkZk7ETTetRHR0SrftlbpO05Unz5s3D/PmzUNVVRWOHj0KURSRlZWF9PT0UO2PiIiIiIiIqFOUmZwusYc2EqEmTLgHJ09u8ByXlHyH0tIdSE8fFdDz6+tLUVV1ULaWm8sgJ4XH8OHX47vv/uw5rq8/jZKStbBa6/D++1fD5bLLzs/Lm4Vrr/0YOl1Md2+VuijoTM62EhMTMXbsWIwfP14W4Dx06BBuuOGGUNyCiIiIiIiIKCDM5AyvIUMWwmTKkK1t3vxcwM8/fnyN7FinMyEtbWQotkbkJSVlGFJTz5Otff31L/C//y30CnAOHHgJrr/+cwY4+6iQBDmViouLcdNNN2HYsGF45513wnELIiIiIiIiIp+8MjkZ4wwptVqLMWN+IlsrKlqMxsaKgJ7v3Y9zKlSqLhWaErVLWbJeVrYTkuSSrQ0bdg2uvvpDaDSG7twahVCngpwffPABbr75Zlx44YW4+eab8dFHH8keLy8vxx133IHBgwfjrbfegtPpxNy5c0O6YSIiIiIiIqL2aFQcPBRuY8bcAbVa5zl2uWzYvv2VgJ6rzORkP04Kt8LCa9t9fNSoW3HFFW9DrdZ2044oHAIOcl599dW4+uqr8eabb+Lrr7/Gm2++iSuvvBK33HILAODTTz/FkCFD8J///AdOpxPjx4/HihUr8OWXX4Zt80RERERERERKanmMEy4JkFiyHlIxMalegaMtW16Ay+Vo93lNTZWoqNgjW2M/Tgq3uLgcZGdP8/nYhAk/x4IFr0ClUnfzrijUAgpyvv3223j//fchSRIGDhyIhQsXYs6cOTCbzXj99dfx+OOP46qrrkJtbS0GDBiADz/8EBs2bMCMGTPCvH0iIiIiIiIiOWUmJ8CS9XAYP/4e2XF9/Sns37+03ecoszi12iikp48J9daIvAwffr3X2vTpD2HevCchCN7fM6jvCSjI+eabb0IQBDz++OPYt28f3nvvPXz99dc4ePAgxo8fj9/+9rdwOBy44YYb8P333+Oyyy4L87aJiIiIiIiIfFNmcgIcPhQOGRljkJk5Sba2efOz7T7n2DF5P86srMksEaZuMXLkzcjIGAcAUKm0uOCCf2DmzEcZ4IwgAXX23blzJwYNGoRf/vKXsvXk5GQ88cQTmDp1KlJSUvDqq69Cq+U3JyIiIiIiIuo5ysFDAOASAbAaNeQmTLgHJ09u8ByXlHyH0tIdSE8f5fN85dAh9uOk7qLRGLBo0RqcOrUFCQn9YTJl9PSWKMQCyuSsrq7G8OHDfT42cuRIAMDEiRMZ4CQiIiIiIqIep/bxSpeZnOExZMhCr2DR5s3P+Ty3ubkG5eXfy9YY5KTupNEYkJMzjQHOCBVQkNPpdCI6OtrnY1FRUQCAhISE0O2KiIiIiIiIKEg+e3KKPbCRc4BarcXYsXfK1oqKFqOxscLr3JKStQBag80ajQH9+o0P9xaJ6BwR8HR1IiIiIiIior7A1wtdZnKGz5gxd0Ct1nmOXS4btm9/xes8ZT/OzMyJ0Gj0Yd8fEZ0bAurJCbj7cj766KNBPf6HP/yh8zsjIiIiIiIiCoIgCNAIgLNNXNMlMsgZLtHRKSgsvBa7dr3hWdu69V+YPPlXsqFC7MdJROEUcJBz165d2LVrV1CPM8hJRERERERE3UmtEuB0tQY2nYxxhtX48ffIgpwWy0ns378Uw4ZdBQCw2SwoK9shew6DnEQUSgEFOadPnw7Bx3S63qC6uhp33303Pv30U6hUKixcuBDPPPMMYmJi/D7HarXi/vvvxzvvvAObzYZ58+bhhRdeQGpqquccXx/vkiVLcO2114bl4yAiIiIiIqLQ0QiArc0xMznDKyNjDDIzJ8kmrW/e/KwnyFlSsg6S1NoYVa3WITNzYrfvk4giV0BBzlWrVoV5G8G74YYbUFpaimXLlsHhcGDRokW44447sHjxYr/P+cUvfoHPP/8c7733HmJjY3HXXXfhiiuuwLp162Tnvfbaa5g/f77nOC4uLlwfBhEREREREYWQe/gQMzm704QJ98iCnCUl36G0dAfS00d5lar36zceWq2xu7dIRBGsTw8e2rdvH7766iv8+9//xoQJEzB16lQ899xzeOedd3D69Gmfz6mrq8N//vMfPPnkk5g1axbGjBmD1157DevXr8fGjRtl58bFxSEtLc3zZjAYuuPDIiIiIiIioi5SK6rzOHgo/IYMWQiTKUO2tnnzcwC8+3FmZ0/vtn0R0bmhTwc5N2zYgLi4OIwdO9azNmfOHKhUKmzatMnnc7Zt2waHw4E5c+Z41gYPHozs7Gxs2LBBdu7PfvYzJCUlYfz48Xj11Vch8T9FIiIiIiKiPkGjeLXLcvXwU6u1GDv2TtlaUdFi1NYew+nTW2Xrubnsx0lEoRXw4KHeqKysDCkpKbI1jUaDhIQElJWV+X2OTqfzKj1PTU2VPefRRx/FrFmzEBUVhW+++QY//elP0dDQgHvuucfvfmw2G2y21q4vFosliI+KiIiIiIiIuso7k7OHNnKOGTPmDqxZ8xhcLjsAwOWy4ZNPboUoOj3nCIIaWVmTe2qLRBShemUm529+8xsIgtDu2/79+8O6h4ceeghTpkzBqFGj8Otf/xoPPPAA/v73v7f7nL/85S+IjY31vGVlZYV1j0REREREROQbMzl7RnR0CgoL5QN7jx5dITvOyBgLnc7/sGAiomD0yiDn/fffj3379rX7lp+fj7S0NJw5c0b2XKfTierqaqSlpfm8dlpaGux2O2pra2Xr5eXlfp8DABMmTMDJkydlmZpKv/3tb1FXV+d5O3HiROAfNBEREREREYWMhpmcPWb8eP8VkACQk8NSdSIKvV5Zrp6cnIzk5OQOz5s0aRJqa2uxbds2jBkzBgCwYsUKiKKICRMm+HzOmDFjoNVqsXz5cixcuBAAcODAAZSUlGDSpEl+77Vz507Ex8dDr9f7PUev17f7OBEREREREXUPZbk6Mzm7T0bGGGRlTcaJE+t9Ps5+nEQUDr0yyBmoIUOGYP78+bj99tvx4osvwuFw4K677sK1116LjAz3RLdTp05h9uzZeOONNzB+/HjExsbi1ltvxX333YeEhASYzWbcfffdmDRpEiZOnAgA+PTTT1FeXo6JEyfCYDBg2bJl+POf/4xf/vKXPfnhEhERERERUYCU5eqcrt69xo+/22eQUxBUyM6e2gM7IqJI16eDnADw9ttv46677sLs2bOhUqmwcOFCPPvss57HHQ4HDhw4gKamJs/aU0895TnXZrNh3rx5eOGFFzyPa7VaPP/88/jFL34BSZIwYMAAPPnkk7j99tu79WMjIiIiIiKi4HgNHhJ7aCPnqCFDFsJkykB9/WnZelraKOj15h7aFRFFMkGS+OuscLFYLIiNjUVdXR3MZn4TJyIiIiIi6i5fltRjV1XrTIWxyQbMyeSwm+60Zs2fsHLlQ7K1iRPvw7x5T/TQjoioLwo0vhbU4KHa2lp8//33qKmpka2Xl5dj0aJFGDVqFC6//HJ8//33wVyeiIiIiIiIqEuYydnzxoy5A2q1TrbGfpxEFC5BBTn/8pe/YNSoUTh69KhnzeFwYOrUqXjjjTewa9cufPzxx5g5cyZOnz7dzpWIiIiIiIiIQk+jUgweYhFjt4uOTsGUKb/xHCcnD8OAARf24I6IKJIFFeRcuXIlcnJyMHr0aM/ae++9hyNHjmDSpElYunQpbr31VtTU1Mh6XRIRERERERF1B408xgknp6v3iBkzHsG1136CSy55CYsWrYVare3pLRFRhAoqyHnixAkUFBTI1j777DMIgoBXX30VP/jBD/DKK68gJycHn3/+eUg2SkRERERERBQotSKT08kYZ48QBAGDBi3AmDF3wGiM7+ntEFEECyrIWV1djeTkZNnahg0bkJ+fj4EDB3rWRo8ejRMnTnRth0RERERERESdpMzkZLk6EVFkCyrIqdfrUVtb6zkuKyvD8ePHMXXqVNl5RqMRzc3NXdogERERERERUWd5ZXJy8BARUUQLKsg5cOBArFu3Dk1NTQCADz/8EIIgeAU5T58+jZSUlK7vkoiIiIiIiKgTNAIHDxERnUuCCnJec801qKurw/nnn49f/OIX+M1vfgO9Xo8f/OAHnnOcTie2b9/u1buTiIiIiIiIKNzUHDxERHRO0QTzpHvvvRdff/01VqxYgW3btkGtVuPpp5+W9elctmwZLBYLpk2bFrLNEhEREREREQVCo1JmcvbQRoiIqFsEFeTU6XRYtmwZvvvuO5SXl2P06NHIz8+XnWMwGPDUU0/JsjuJiIiIiIiIugMzOYmIzi1BBTkBQBCEdrM0Z86ciZkzZwZ7eSIiIiIiIqKgMZOTiOjcElRPzvY0Nzdj165dqKqqCvWliYiIiIiIiALilcnJwUNERBEtqCDn2rVrcd9992HXrl2y9cWLFyMlJQWjR49Geno6Hn300ZBskoiIiIiIiKgzvDI5xR7aCBERdYuggpwvv/wy/vnPf6Jfv36etRMnTuCWW25BY2MjYmNj4XQ68cc//hGrV68O2WaJiIiIiIiIAqEW5EFO9uQkIopsQQU5N23ahBEjRiApKcmz9uabb8Jut+ORRx5BdXW1J7j5wgsvhGanRERERERERAHSKF7tigBElqwTEUWsoIKclZWVyMzMlK2tWLECOp0O9913HwBg2rRpmDhxInbs2NH1XRIRERERERF1gkaRyQlw+BARUSQLKsjZ0NAAo9HoOZYkCVu2bMHYsWMRExPjWc/NzcXp06e7vksiIiIiIiKiTlD7eLXrYsk6EVHECirImZCQgGPHjnmOd+zYgfr6ekyePFl2nsPhgE6n69IGiYiIiIiIiDrLVyankzFOIqKIFVSQc9y4cdi8eTM2bNgAAHjmmWcgCAJmzZolO+/QoUNIT0/v+i6JiIiIiIiIOkE5eAjg8CEiokgWVJDz3nvvhSRJmDp1KhISEvDWW28hPz8fc+fO9ZxTWVmJoqIijBo1KmSbJSIiIiIiIgqEcvAQALg4eIiIKGIFFeScM2cOXn31VeTk5MBut+P888/Hp59+CpWq9XJvvvkmRFHE+eefH7LNEhEREREREQVCJQheL3idYo9shYiIuoEgSeH5VVZzczPsdjtiYmKgVqvDcYtez2KxIDY2FnV1dTCbzT29HSIiIiIionPKE7sq4WgT2LxxYCwyorU9tyEiIuq0QONrmnBtwGg0yiawExEREREREXUnjSDAgda8HmZyEhFFri4FOSVJwpdffon169ejoqICEyZMwC233AIAqKioQE1NDfr373/OZnISERERERFRz1GrBMDVJsjJnpxERBEr6CDnrl27cM011+DQoUOQJAmCIMDhcHiCnMuWLcOPfvQjLF26FAsWLAjZhomIiIiIiIgCoVEMWOfgISKiyBXU4KGTJ09izpw5OHjwIC688EI8/vjjULb2vOyyy6DVavHxxx+HZKNEREREREREnaFRyaOcLFcnIopcQQU5//znP6OqqgpPP/00PvvsM/zyl7/0OicqKgojRozAli1burxJIiIiIiIios5SM5OTiOicEVSQ86uvvsLgwYNxzz33tHtebm4uSktLg9oYERERERERUVcwk5OI6NwRVJDz9OnTGD58eIfnCYIAi8USzC2IiIiIiIiIukQtKIKczOQkIopYQQU5o6OjUVFR0eF5R48eRUJCQjC3ICIiIiIiIuoSr8FDIoOcRESRKqgg5/Dhw7Ft2zZUVlb6Pef48ePYtWsXxowZE/TmiIiIiIiIiIKlVparM8ZJRBSxggpy/vCHP0R9fT1uu+02NDU1eT1ut9vx05/+FA6HAz/84Q+7vEkiIiIiIiKizmImJxHRuUMTzJMWLVqEt99+G5988gkGDx6M+fPnAwB27dqFe+65B5988glKSkowZ84cXHPNNSHdMBEREREREVEgmMlJRHTuECQpuM7LDQ0N+PGPf4x33nkHvi6xcOFCvPbaa4iJienyJvsqi8WC2NhY1NXVwWw29/R2iIiIiIiIzilflTRgZ5XVczw6yYC5Wefua1Qior4o0PhaUJmcABATE4O3334bDz30EL744gsUFxdDFEVkZWXhwgsvxMiRI4O9NBEREREREVGXqRUN2lycrk5EFLGCDnK2GDx4MAYPHhyKvRARERERERGFjEZQlKuLPbQRIiIKu6AGDxERERERERH1dszkJCI6dwQV5Pzqq68wa9YsrFixwu85y5cvx6xZs7Bs2bKgN0dEREREREQULK9MTsY4iYgiVlBBztdeew2bN2/GuHHj/J4zfvx4bNq0Cf/973+D3RsRERERERFR0NTyGCdcIqOcRESRKqgg59atWzFy5EiYTCa/55hMJowaNQqbN28OenNEREREREREwdKolJmcDHISEUWqoIKcpaWlyM7O7vC8rKwslJaWBnMLIiIiIiIioi5RBjldHDxERBSxggpy6nQ61NfXd3heQ0MDVCrONiIiIiIiIqLupyxXZyYnEVHkCioCWVBQgHXr1qGpqcnvOU1NTVi3bh3y8/OD3hwRERERERFRsJSDh5jJSUQUuYIKci5YsAC1tbW46667IPn4TZgkSbj77rtRV1eHSy+9tMubJCIiIiIiIuosteIVLzM5iYgilyD5ilJ2oLa2FoWFhSgtLcWoUaNwyy23YPDgwQCA/fv349VXX8WOHTuQlpaGoqIiJCQkhHzjfYHFYkFsbCzq6upgNpt7ejtERERERETnlKMWO949YvEcx2hUuGv4ufn6lIiorwo0vqYJ5uJxcXH4/PPPsWDBAmzfvh07duyQPS5JEjIzM/HJJ5+cswFOIiIiIiIi6lmcrk5EdO4IKsgJACNGjMD+/fvxyiuv4Ouvv8bx48cBANnZ2Zg/fz5uu+02REdHh2yjRERERERERJ2hHDzkYpCTiChiBR3kBICoqCjce++9uPfee0O1HyIiIiIiIqKQ8MrkFN2Vh4JiIBEREfV9QQ0eqq6uDvjcbdu2BXMLIiIiIiIioi5RZnJKADhgnYgoMgUV5Bw1ahQ2bdrU4XnPPvsspk6dGswtiIiIiIiIiLpEmckJAC5GOYmIIlJQQc4TJ05g+vTpeOqpp3w+brFYcOWVV+IXv/gFywCIiIiIiIioR2h8vB7l8CEiosgUVJDzpZdeglqtxi9/+UtcfvnlqKur8zy2fft2jB49Gh9++CHy8vLw3XffhWyzRERERERERIFSlqsDgEtkkJOIKBIFFeS8/fbbsWHDBvTv3x8ff/wxRo8ejc2bN+Of//wnpkyZguLiYlx55ZWegCcRERERERFRd/NVru5kjJOIKCIFPV19xIgR2L59O2699Va89957mDx5MiRJgk6nwz//+U/89Kc/DeU+iYiIiIiIiDrFVyank5mcREQRKahMzhYxMTF48MEHERsbC1F0d2++6qqrGOAkIiIiIiKiHicIgleg08UYJxFRROpSkPPll1/GpEmTYLFYMHfuXMTExODtt9/GBRdcgDNnzoRqj0RERERERERBUQ4fYiYnEVFkCirI2djYiBtuuAF33nknRFHEM888g6+++gpbt27Feeedh+XLl2PUqFFYvXp1qPdLREREREREFDC14lWvi9PViYgiUlBBzjFjxmDJkiXIycnBd999h7vuugsAUFBQgI0bN+L2229HaWkp5syZg8ceeyykGyYiIiIiIiIKlHcmZw9thIiIwiqoIOfBgwdx6aWXYseOHRg7dqzsMb1ej5deeglvvfUWDAYDHnnkkVDsk4iIiIiIiKjTlJmcTmZyEhFFpKCCnP/4xz/w0UcfITY21u85119/PbZu3YrCwsKgN0dERERERETUFcpMTg4eIiKKTEEFOe+7776Azhs0aBA2bdoUzC2IiIiIiIiIukyt4uAhIqJzQZemqwfCYDCE+xZEREREREREPmnkMU4OHiIiilABBTkfffRRfPLJJz4f+/7773Hy5Emfjz333HO44oorgt8dERERERERUReoOXiIiOicEFCQ85FHHsHSpUt9PjZq1Cg8/PDDPh/bvn07Pv7446A3R0RERERERNQVGsWrXmZyEhFFpi6Xq0uSBIn/SRAREREREVEvxExOIqJzQ9h7chIRERERERH1FI1KOV2dSTpERJGIQU4iIiIiIiKKWGrF4CFOVyciikwMchIREREREVHE8s7k7KGNEBFRWDHISURERERERBGLmZxEROcGBjmJiIiIiIgoYjGTk4jo3KAJ9MSdO3fi0Ucf7dRjO3fuDHpjRERERERERF2lUU5X5+AhIqKIFHCQc9euXdi1a1enHpMkCYLiPxQiIiIiIiKi7sJydSKic0NAQc7p06czWElERERERER9DsvViYjODQEFOVetWhXmbRARERERERGFHjM5iYjODRw8RERERERERBGLmZxEROcGBjmJiIiIiIgoYnkNHmImJxFRRGKQk4iIiIiIiCKWWvGql5mcRESRiUFOIiIiIiIiiljM5CQiOjcwyElEREREREQRS5nJ6ZQY5CQiikQMchIREREREVHEUmZyslydiCgyMchJREREREREEUs5XZ3l6kREkYlBTiIiIiIiIopYanmMEy4JkFiyTkQUcRjkJCIiIiIiooilzOQEWLJORBSJuhTkPHLkCB544AFMnToVgwYNwgMPPOB5bNOmTXj55ZdRV1fX5U0SERERERERBUOZyQlw+BARUSTSBPvE119/HT/5yU9gs9kAAIIgoLKy0vN4U1MT7rzzTuh0Otx8881d3igRERERERFRZykHDwGASwSg7v69EBFR+ASVyblx40bcdttt0Ol0ePzxx7Fp0yavnibnn38+YmNj8emnn4Zko0RERERERESdpfbxqpeZnEREkSeoTM7HH38ckiTh888/x9SpU32eo1KpMHLkSOzdu7dLGyQiIiIiIiIKlt9MTiIiiihBZXKuW7cO48eP9xvgbJGWlobS0tKgNkZERERERETUVT7mDjGTk4goAgUV5KytrUV2dnaH5zU3N8NutwdzCyIiIiIiIqIuEwQBGkWg0yUyyElEFGmCCnImJibi+PHjHZ53+PBhpKWlBXMLIiIiIiIiopBQK9I5nYxxEhFFnKCCnBMnTsTWrVuxZ88ev+esW7cOe/bs6bCknYiIiIiIiCicmMlJRBT5ggpy/uxnP4PL5cLChQuxc+dOr8f37duHW265BYIg4Kc//WlX90hEREREREQUNGZyEhFFvqCCnLNnz8Z9992HgwcPYsyYMRg4cCAEQcDXX3+N8847D8OHD8ehQ4fwq1/9ChMnTgz1nomIiIiIiIgCppywzsFDRESRJ6ggJwD84x//wEsvvYS0tDQcPnwYkiShtLQUu3fvRkJCAp577jn89a9/DeVeiYiIiIiIiDpNzXJ1IqKIp+nKk2+//Xbcdttt2LFjB4qLiyGKIrKysjBu3DhoNF26NBEREREREVFIaFiuTkQU8bociRQEAaNHj8bo0aNDsR8iIiIiIiKikNIoahiZyUlEFHmCKle///77sXfv3lDvhYiIiIiIiCjk1F49OXtoI0REFDZBBTmfeuopDB8+HBMmTMCLL76Iurq6UO+LiIiIiIiIKCSUg4eYyUlEFHmCCnLed999SElJwZYtW/Czn/0M6enpuOGGG/Dtt9+Gen9EREREREREXaJWvPLldHUiosgTVJDzH//4B06ePImlS5fiBz/4AVwuF5YsWYJ58+YhJycHDz/8MIqLi0O9VyL6f/buOzyqMn0f+H2mZTKpEAgBQgotQYrSpWUpKgiIKFksINUuuIqwYgVdEb4uIiiy/lAxIDZcVhBQkN5CSVR6gFBDCwRSJskkkynn90fMkDkzSSZTU+7PdXHt5syZc95JJkHuPM/7EBERERFRtdlWcvpoIURE5DFOhZwAIJfLMWLECPz000+4cuUKPvzwQ3To0AGXLl3Cv/71L7Rp0wYDBgzA119/7c71EhEREREREVWLdPAQKzmJiOoeQRTd+9P9jz/+wFdffYXvvvsO2dnZkMlkMBqN7rxFraHVahESEoK8vDwEBwf7ejlERERERET10m+XCvDHzWLLx50bqTG4RaAPV0RERI5yNF9TuPvGXbp0gV6vR15eHlauXAk3Z6hERERERERE1aKQSaarc/AQEVGd47aQ8+rVq1ixYgWSkpKQnp4OoLSlfciQIe66BREREREREVG1ya0zToacRER1kEshZ0lJCX766SckJSVhy5YtMJvNEEURbdu2xcSJEzFu3Dg0bdrUXWslIiIiIiIiqjZpJaeJGScRUZ3jVMh58OBBJCUl4YcffkBubi5EUURgYCBGjx6NiRMnok+fPu5eJxEREREREZFTFNJKTm6rRkRU5zgVct59990QBAGiKKJfv36YOHEiRo8eDY1G4+71EREREREREblELkgqOc0+WggREXmMUyFns2bNMH78eEycOBGtW7d295qIiIiIiIiI3MZm8BArOYmI6hynQs6MjAzIZDJ3r4WIiIiIiIjI7Th4iIio7nMqqWTASURERERERLUFBw8REdV9DlVyZmRkAACaN28OuVxu+dhRUVFR1V8ZERERERERkRuwkpOIqO5zKOSMiYmBTCbDiRMn0LZtW8TExECQbNxcEUEQYDQaXVokERERERERkbNYyUlEVPc5FHJGRUVBEAQolUqrj4mIiIiIiIhqOptKTg4eIiKqcxwKOS9cuFDpx0REREREREQ1lU0lp9lHCyEiIo/hBCEiIiIiIiKq0+SSTkRWchIR1T1OhZzvvvsufv755yrPW7duHd59911nbkFERERERETkFgrJv3zNIiAy6CQiqlOcCjlnz56NNWvWVHnezz//jHfeeceZWzgsOzsbY8aMQXBwMEJDQzF58mQUFBRU+pylS5eif//+CA4OhiAIyM3Ndct1iYiIiIiIqOZR2JkpYWTGSURUp3i0Xd1sNnt8QNGYMWNw/PhxbN68GevXr8euXbvw9NNPV/ocnU6HIUOG4PXXX3frdYmIiIiIiKjmkdv5l6/JzJSTiKgucWjwkLMuXbqEwMBAj10/LS0NGzduREpKCrp16wYA+OSTTzB06FDMnz8fzZo1s/u8l156CQCwY8cOt16XiIiIiIiIah5WchIR1X0Oh5wrVqyw+vjMmTM2x8oYjUYcP34c27dvR69evVxbYSX27duH0NBQSxAJAPfccw9kMhkOHDiAhx56qEZdl4iIiIiIiLxPOngIAIys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+By9Xg+9Xm/5WKvVurQGIiIiIiIicj85p6uTD7BdvX5iu7r31MhKzpkzZ9oM/ZH+OXnypEfXMG3aNPTv3x+dOnXCs88+iw8//BCffPKJVYgpNXfuXISEhFj+tGjRwqNrJCIiIiIiouqTFFbBxJCTvIDt6vUT29W9p0ZWcr7yyiuYMGFCpee0bNkSERERuHHjhtVxo9GI7Oxst++l2bNnTxiNRly4cAFxcXF2z3nttdcwbdo0y8darZZBJxERERERUQ0jl7Srs7CKvMHASs56SVrJqeMPHI+pkSFn48aN0bhx4yrP69WrF3Jzc/H777+ja9euAIBt27bBbDajZ8+ebl3ToUOHIJPJbNrjy/Pz84Ofn59b70tERERERETuJSmsggjALIqQCQydyHP0rOSslzQKacgpQhRFCPx543Y1sl3dUe3atcOQIUPw1FNP4eDBg9i7dy+mTJmCRx991DJZ/cqVK4iPj8fBgwctz8vMzMShQ4dw5swZAMDRo0dx6NAhZGdnAygdaLRw4UIcPnwY586dwzfffIOXX34ZY8eORYMGDbz/QomIiIiIiMhtpJWcAKs5yfOke3IqGXLWCwGS/TFEAEUcPuQRtTrkBIBvvvkG8fHxGDRoEIYOHYq+ffti6dKllscNBgNOnToFnU5nOfbZZ5+hc+fOeOqppwAACQkJ6Ny5M37++WcApRWZ33//Pf72t7+hffv2mDNnDl5++WWr6xIREREREVHtpLATLnFfTvI0tqvXTxqlbfTG4UOeIYgif5J7ilarRUhICPLy8hAcHOzr5RARERERERGAYqMZC49mWx17oX0DBKnkPloR1QefHL2FwnIVfI+2CkZMsMqHKyJvWXjkForLbVfwaOtgxATxa+8oR/O1Wl/JSURERERERFQdcruVnD5YCNUrNu3qrOSsN2yGDxn4A8cTGHISERERERFRvaKwky0ZzQwdyHPMogiDpEOZg4fqD43khw7b1T2DIScRERERERHVK4IgQJovcQ4IeZJ0P06Ae3LWJwGSCesMOT2DIScRERERERHVOwrJhHUOHiJPKrGzHwIrOesPabt6obSsl9yCIScRERERERHVO3LJv4bZrk6eJN2PE2AlZ30ireTUsZLTIxhyEhERERERUb1jW8npo4VQvSANOeUCIBcYctYXGpt2df7A8QSGnERERERERFTvKFjJSV4k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taSVnDqjCJNoHWpKiztZyUlErqiRe3K+8sormDBhQqXntGzZEhEREbhx44bVcaPRiOzsbERERFT6/Pz8fAwZMgRBQUH46aefoFQqLY9FRETg4MGDVudfv37d8lhFXnvtNUybNs3ysVardU/QaTYDRfmuX8eX/IMAmWuZ+rFjx9CnTx9otVrExcVh+PDhkMvluHz5Mnbt2oUrV65g4sSJLi91165dGDlyJHJychATE4N7770Xer0eBw8exNSpU7Fu3TqsX7/e6j1T5q233kJaWhq+/fZbhIeH48SJEy6vh4iIiIiIqLYJVNj++09nNCNIKbd8zHZ1InKnGhlyNm7cGI0bN67yvF69eiE3Nxe///47unbtCgDYtm0bzGYzevbsWeHztFotBg8eDD8/P/z8889Qq9U2150zZw5u3LhhaYffvHkzgoODcccdd1R4XT8/P/j5+TnyEqunKB/49wT3X9ebZiQBASEuXWLBggXQarV477338MYbb1g9VlRUhJSUFJeuD5RuR/Dwww8jNzcXS5YswTPPPAPZX+HsrVu3MHr0aPz222+YO3cu3n77bavnJicnY8GCBXjwwQfx2GOPubwWIiIiIiKi2spfIUAAUD7GLDSICCpXKyINOdmuTkSuqJHt6o5q164dhgwZgqeeegoHDx7E3r17MWXKFDz66KOWyepXrlxBfHy8pTJTq9XivvvuQ2FhIb788ktotVpkZmYiMzMTJpMJAHDffffhjjvuwBNPPIHDhw9j06ZNePPNN/HCCy94JsQkh5RV0w4dOtTmMX9/fyQkJLh8j4ULF+LWrVt44YUX8Nxzz1kCTgAICwvDihUroFQqsXjxYojlWi10Oh0mTJiAkJAQ/Oc//3F5HURERERERLWZIAi2+3JK+tNLOF2diNyoVoecAPDNN98gPj4egwYNwtChQ9G3b18sXbrU8rjBYMCpU6eg0+kAAH/88QcOHDiAo0ePonXr1mjatKnlz6VLlwAAcrkc69evh1wuR69evTB27FiMGzcO7777rk9eI5Xq0aMHAOC5557Dpk2bUFxc7PZ7bNiwAQDwyCOP2H28efPmaNOmDbKyspCenm45PnPmTKSnp2PhwoVo2rSp29dFRERERERU2wQorUNL6fAh23Z1jy+JiOqwGtmuXh0NGzbEt99+W+HjMTExVhV3/fv3t/q4ItHR0fjll1/cskZyjxkzZmDPnj3YsmULhgwZAqVSiTvvvBMJCQl49NFH0b17d5fvce7cOQBAv379qjw3KysLbdu2xY4dO7B48WIMHToU48aNc3kNREREREREdUFpJafJ8rG0kpN7chKRO9X6kLNe8A8q3dOyNvMPcvkSGo0GmzdvRkpKCjZu3Ijk5GQkJycjNTUVCxYswPPPP49PP/3UoWuZzeZKjycmJiIgIKDSa4SFhQEA1qxZA1EUkZGRYTOtPTc3F0Dptglljy1cuBB33XWXQ+skIiIiIiKqraQT1quq5OSenETkCoactYFM5vLQnrqke/fulqpNo9GINWvWYNy4cViyZAkSExMxYMAAqFQqAEB+vv2p9BcvXrR7vEWLFkhPT8err76Kbt26VWtdx44dq/Cx4uJi7Ny5E8Dt4JOIiIiIiKguswk5y1VyiqIISWEnKzmJyCXc8YJqNYVCgcTERAwePBgAcOjQIQCle2cCQFpamt3nle29KXX//fcDAFatWuXwGhYuXAhRFO3+2b59OwCgVatWlmPSak8iIiIiIqK6SDp4qKBcJac04AQYchKRaxhyUq2xZMkSnDp1yuZ4ZmYmUlNTAZTupQoAAwcOhEwmw6ZNmywVlEDpbws//vhjrF692u49ZsyYgdDQUCxYsAAffvghSkpKbM45f/48Vq5c6Y6XREREREREVGdJKzl1htvt6dJWdYDt6kTkGoacVGssXboU8fHxaNmyJUaMGIGxY8di8ODBaNmyJS5fvoyBAwdixIgRAErbzqdOnQqz2YxBgwZhwIABGDVqFNq0aYPp06dj5syZdu8RGRmJtWvXokGDBpg+fTpatGiBQYMGYezYsXjggQfQunVrtGzZEosXL/bmSyciIiIiIqp1AhTWoaV1JadtyKmUM+QkIudxT06qNebMmYMNGzZg//792L9/P/Ly8hAeHo6ePXti4sSJeOyxx6BQ3H5Lf/TRR4iKisIXX3yB5ORkBAYGok+fPli1ahW0Wi3mzZtn9z4JCQk4fvw4Fi9ejA0bNiAlJQV6vR7h4eGIiorC2LFjMWrUKG+9bCIiIiIiolopUFLJqTeJMJpFKGQCSuyEnApmnETkAkEURdufLOQWWq0WISEhyMvLQ3BwcKXnFhcX4/z584iNjYVarfbSComIqD7h3zVERETkTcVGMxYezbY69lz7BghRyXGl0ICvT+dZjqtkAqbdGebtJRJRLeBovsZ2dSIiIiIiIiJyOz+5AGkHen5Jacu6wWRdb6VkOkFELuKPESIiIiIiIiJyO0EQEKKSWx07n1863FXars7J6kTkKoacREREREREROQRLYOVVh+fyi0NOaWDhxhyEpGrGHISERERERERkUfEh/pZfXyz2ISbRUYYzNbnqThZnYhcxJCTiIiIiIiIiDyieYACQZINN0/mlrBdnYjcjiEnEREREREREXmEIAhoG6qyOnYyV892dSJyO4acREREREREROQx9lrWr+mMVsdUDDmJyEUMOYmIiIiIiIjIYyIDFAiUtKyfyyux+piVnETkKoacREREREREROQxgiAgTtKyLpk7BCXTCSJyEX+MEBEREREREZFHSVvWpVjJSUSuYshJRERERERERB4VGaBAoKLiCEIlZ8hJRK5hyElEREREREREHmVvynp5rOQkIlcx5CQiIiIiIiIij4tvUHHLOkNOInIVQ04iIiIiIiIi8rjIAAUCFPbDTIacROQqhpxEbrJjxw4IglDpn88++8yt95wwYYLl2nfddVel56akpFitZc+ePW5dizckJSXZfE5lMhlCQkLQo0cPzJkzBwUFBV5f1+zZsyEIAmbPnu3V53qL2WxGUlIS7r33XoSHh0OpVKJhw4Zo27YtRowYgQ8++AAXLlywek7Z6+rfv3+l1y7/fSNV1fdT2Z8dO3Y4/FpiYmJsnu/n54eoqCg88sgj2L17t8PXIiIiIqLqkQkC4ioYQKRiyElELlL4egFEdU2TJk0wZMgQu4/FxcV57L6HDx/G77//jq5du9p9/Msvv/TYvR21Y8cODBgwAH/729+qFUxJBQQEIDExEQBgMplw7tw57N+/HykpKVixYgV27dqFJk2auGnVznPX6/WlwsJCPPDAA9i+fTsAoEuXLkhISIBcLse5c+ewceNGrFu3DhqNBlOmTPHIGgYPHoyIiIgKH6/ssYr06dMHrVu3BgDk5uYiNTUVq1atwo8//oj58+dj2rRpTq/XUUlJSZg4cSLGjx+PpKQkj9+PiIiIqCaID/XDHzeLbY6zkpOIXMWQk8jN4uPjvR5YdOvWDampqVi2bJndkLOoqAjff/89mjZtCrlcjsuXL3t1fe7WqFEjm8/xwYMHMWjQIJw+fRozZszAihUrvLaeKVOm4NFHH0WjRo28+lxvmD17NrZv345mzZrh119/RadOnawez8vLw+rVq9G0aVOPrWHmzJlVVoRW15NPPokJEyZYPi4uLsYzzzyDFStW4J///CeGDx+Otm3buvWeRERERAREBpa2rBcaRavjSrmPFkREdQbb1YnqgGHDhqFJkyb47rvvUFxs+1vR//73v8jLy8O4ceMgl9fN/3ro0aMHXnnlFQDA//73PxiNRq/du1GjRoiPj3cqqHTlud7w/fffAwBmzZplE3ACQEhICCZNmoT777/f20tzK7VajU8//RQBAQEwmUz43//+5+slEREREdVJMkFAWzst66zkJCJXMeSkWiU9PR2TJk1CbGws/Pz8EBgYiOjoaAwbNgxfffWV1blV7XVYthdgRRViV69exbRp09CuXTtoNBoEBQWhe/fuWLx4sVcDNEcoFAo88cQTyMnJwU8//WTz+LJlywAAkyZNqvQ6RqMRn332GXr37o2QkBCo1Wq0adMGL774Iq5cuWL3OY5+Tfr3748BAwYAAHbu3Gm1J2JMTIyTr9xaWRVrYWEhbt68aTmenZ2N119/He3bt7d8Lbt27YoPPvgARUVFdq+1ZcsWPPDAA2jSpAmUSiUaNGiANm3aYOzYsdi1a5fVufbea46+XnvPfe211yAIAp599tkKX+uxY8cgCAKaNGkCg8Fg9Zg737vXr18HAISHh1frebVRYGCgZUsJ6R6jmzZtwvDhwxEeHg6VSoVmzZrhkUceQWpqqt1r9e/f37Jf6O7du/HAAw+gcePGkMlkSEpKQkxMDCZOnAgAWL58udX7w91Vq0REREQ1TXyoyuYY9+QkIlexXb0WEM0iTDqTr5fhErlGDsHFv7SOHTuGPn36QKvVIi4uDsOHD7e0Xu/atQtXrlyxhAau2rVrF0aOHImcnBzExMTg3nvvhV6vx8GDBzF16lSsW7cO69evh1KptHnu9evX8e677+LKlStQq9WIj4/HsGHDEBUVVeH9+vfvj507d2LWrFlOD6CZNGkS5s+fj2XLluGxxx6zHD979ix27tyJPn36VNp+q9frMXz4cGzZsgVqtRoDBgxAcHAwkpOT8cknn+C7777Dpk2b0KVLF8tzqvM1GTJkCNRqNTZt2mSzb6m7qhi1Wq3l//v5lf52+Ny5cxg4cCAuXryIxo0bY+jQoTAYDNi+fTteffVV/PDDD9iyZQsaNGhgee7y5cst6+7RowcGDBiAoqIiXL58Gd9//z0aNWqEhISEStfiyuudOHEi5s2bhx9++AELFy6EWq22OacsQB47dqzV+9CV9649UVFROHv2LD777DPcf//9ls9rXVX2Hir/Ot966y289957EAQBvXv3RlRUFNLS0rBq1SqsXr0aS5curfAXCD/++CM+++wzxMfH45577kF2djb8/PyQmJiI/fv3Y+/evWjVqhX69u1reU58fLxnXyQRERGRj7UIVCLMT45b+tJ/54aoZAhSsgaLiFzDkLMWMOlMOP9Wuq+X4ZLYf7WBItC1t9uCBQug1Wrx3nvv4Y033rB6rKioCCkpKS5dv0xmZiYefvhh5ObmYsmSJXjmmWcgk5X+hXvr1i2MHj0av/32G+bOnYu3337b5vknT57ErFmzrI4pFApMnToVH3zwARQKz3zbtWvXDr169cK2bduQkZFhCVW/+uoriKKIyZMnV/r8WbNmYcuWLWjVqhW2bNliqTY0GAx47rnn8OWXXyIxMREnT56ESlX6m9fqfE1mzpyJu+++G5s2bfLYvqVr1qwBUBrMlYWWjz/+OC5evIgRI0bg22+/RUBAAAAgKysLQ4YMwR9//IEpU6bgm2++sVznnXfegSiK2L17t1X4BAA3btyosKq1PFdeb9u2bdGnTx/s3bsXa9aswaOPPmr1uNFoxMqVKwHAKth39b1rz5QpU/Dyyy9j06ZNiI6OxogRI3D33Xejc+fO6NSpU53a/uDIkSM4d+4cAOCuu+4CAGzcuBHvvfce1Go1fv75Z9x7772W87/88ks8+eSTePbZZ9GzZ0+0b9/e5ppLlizBp59+iueff97q+GOPPYakpCTs3bsXffv25eAhIiIiqldkgoCHWgZhzzUdRAD9mmogCKzkJCLX8FclVGuUtc0OHTrU5jF/f/8qK+sctXDhQty6dQsvvPACnnvuOUtIBABhYWFYsWIFlEolFi9eDFG8vVl2SEgIXnrpJezcuRPXrl1DYWEhjhw5gpdffhmCIOCjjz6yCTrKREVFIS4uzuWKxkmTJsFsNluq/MxmM5YvX47AwECMHj26wucVFxfj008/BQB89NFHVu3USqUSH3/8MZo0aYLz58/jv//9r+Uxb31NKmMymXDmzBm89NJLlrW99NJLAIA9e/bgwIED0Gg0WLp0qSXgBIDGjRtj6dKlAEr3nSw/jOn69esICQmxCTiB0rbtzp07e/AVlSqrDJRuwwAAGzZswI0bN9CtWzd06NDBctzZ925lXnrpJcyZMwcBAQG4fv06Pv/8c0yePBldunRBgwYNMH78eJw6dcrFV1u5AQMGWLVzl/8TGhrq8vXz8vLwyy+/4OGHH4bZbEazZs0s3y/z588HADz//PNWAScATJ48GcOHD4fBYMCiRYvsXnvgwIEVft8TERER1WeN1AqMjA3GQ7HBaKRm/RURuY4hJ9UaPXr0AAA899xz2LRpk90BO+6wYcMGAMAjjzxi9/HmzZujTZs2yMrKQnr67Qrbzp0746OPPkJCQgIiIiKg0WjQsWNHLFiwwDK85fPPP8ehQ4dsrrlixQqcPHkSU6ZMcWntjzzyCAICApCUlARRFLFp0yZcvnwZo0ePtgr4pFJTU1FQUICGDRvigQcesHlco9FYqgm3b99uOe6tr4nUxYsXLSGXQqFAmzZtsGjRIshkMkybNs0Scu7YsQNAaet4kyZNbK7TtWtX3HnnnTCbzdi5c6fleI8ePSyDmn7//XeYzWZvvCwrZV+zLVu2WAWwwO3gU9oi7ex7tyqvv/46Ll++jKSkJEycOBF33nkn5HI58vPzsWLFCnTu3Bm//PJLdV5etQwePBjjx4+3++fxxx936poTJ060CkqHDRuGs2fPolWrVvjll18QEBAAo9GIvXv3AoDVJPbyyiqky39flJeYmOjU+oiIiIiIiKh6+OsSqjVmzJiBPXv2YMuWLRgyZAiUSiXuvPNOJCQk4NFHH0X37t3dcp+ydtV+/fpVeW5WVlal+1yWefjhh3HXXXfh0KFDWLdunaUV1t2CgoKQmJiI5cuXY9u2bQ4PHCprv46Nja3wnFatWlmdC3jvayIVEBBgCY8EQUBgYCDatm2L4cOHW70GR1/X4cOHrV7XkiVLMHz4cHz99df4+uuvLYN7Bg4ciCeeeKLS/VXdJTAwEH//+9+RlJSEFStW4PXXXwdQ2i6/YcMGqNVqq71XAc+8d8uEhoZagkUAliFXb775Jq5du4bx48fj4sWL0Gg0AGBpN6qqYtSRitKZM2e6fRhPnz590Lp1awCASqVCeHg47r77bgwZMsSypcStW7cswX1F7yF73xfluWuoFhEREREREVWOIWctINfIEfuvNr5ehkvkGtf37dNoNNi8eTNSUlKwceNGJCcnIzk5GampqViwYAGef/55S8u1Iyqqzis7npiYWGn1I1DaAuyodu3a4dChQzZVee42adIkLF++HP/+97+xfft2xMXFoU+fPh65l7u/Jo5q1KiRR/cwbNeuHU6dOoXffvsN27ZtQ3JyMnbv3o1t27bh3XffxZdffomxY8d67P5lJk2ahKSkJCxfvtwScq5cuRJGoxGJiYk2rdqeeu/a06BBA0yaNAmdO3dGly5dcPPmTezdu9fS0l12/8LCwkqvU1BQAKA01PWmJ598ssLqTHfy9/f3+D2IiIiIiIiIIWetIMgEl4f21CXdu3e3VAgajUasWbMG48aNw5IlS5CYmIgBAwYAgGU4Tn5+vt3rXLx40e7xFi1aID09Ha+++iq6devmtnXfunULQGm1pSclJCSgdevW2LRpEwA4NHG+efPmAIDz589XeE5ZlWDZueU5+jXxtrK1lq3dnopel0KhwNChQy37jWq1WixYsADvvPMOnnnmGTz00ENVBomu6tevH1q3bo3Tp09j79696NOnjyXctVed66n3bmU6d+6MRo0a4ebNm7h586bleFm169mzZyGKYoUbyZe1zXujOra6wsLC4OfnB71ej3PnzqFTp04251T2fUFERERERETewz05qVZTKBRITEzE4MGDAcBqv8uy0CEtLc3uc8v2L5S6//77AQCrVq1y2zqvXLmC3bt3A7i9j6UnPfvsswgLC0N4eDjGjRtX5fndunVDYGAgsrOz8fPPP9s8XlRUZNlXtKrAsrKvSVnwbDQaHX0pLilrcd64caNlSFJ5f/75Jw4dOgSZTFblkKTg4GDMnj0boaGh0Ol0OH36dJX3d8frLQupk5KS8Pvvv+Po0aNo0aIFBg0aZHOuJ967VbWT5+bmQqvVAgAiIyMtxxMSEqBQKJCbm4tt27ZV+PyyYVEDBw50w2rdS6FQWIZPVVQ5XLYlhDNBvre/H4iIiIiIiOoyhpxUayxZssTuFOfMzEykpqYCAKKjoy3HBw4cCJlMhk2bNlkNlRFFER9//DFWr15t9z4zZsxAaGgoFixYgA8//BAlJSU255w/fx4rV660OrZo0SKrSrYyR44cwQMPPICioiK0atUKDz74oM0548aNQ3x8PBYvXlzBq6+eV155BTdv3sT169fRtGnTKs9Xq9V44YUXLM8tX+VqMBjwj3/8A5mZmYiNjbUapFLdr0lZCJaeng6DweDci6uGvn37omfPnigqKsIzzzwDnU5neezmzZt45plnAACPPvooWrRoAQDQ6XRYsGABsrKybK63e/du5ObmQi6XWwV6FXHH6x0/fjxkMhlWrVplaf0vOybl7Hu3Mj169MCSJUuQnZ1t81hmZibGjx+PkpISREdHo1evXpbHIiIiLPt3PvvsszahsNFoxKxZs7Bv3z6o1Wr84x//cHhN3vTKK68AAP7zn/9g69atVo8lJSXh559/hlKpdGr9Ze+PEydOuL5QIiIiIiKieo490FRrLF26FC+88AJiY2PRoUMHBAcHIysrC7t370ZRUREGDhyIESNGWM5v0aIFpk6dikWLFmHQoEHo168fGjZsiMOHDyMjIwMzZ87EvHnzbO4TGRmJtWvXYtSoUZg+fTo++OADdOjQAU2bNkVeXh7S0tJw9uxZ9OzZ02pfxlmzZuGVV17BXXfdhdjYWMhkMpw9exZ//vknzGYzoqKisG7dOvj5+dncMyMjA6dOnbIbknrLO++8g9TUVGzduhXt2rXDgAEDEBQUhH379iEjIwNhYWH48ccfLdVnQPW/JlFRUejWrRtSU1PRsWNHdOvWDWq1Go0aNbL7tXCHb7/9FgMHDsTatWsRGxuLhIQEGAwGbN++HVqtFl26dLEKl0tKSvDKK69gxowZ6NixI9q0aQOlUokLFy5g//79AIA33ngDjRs3rvLe7ni9zZs3x3333YeNGzfiq6++giAIFW5B4Ox7tzLp6el44YUX8OKLL6Jjx45o1aoVFAoFrly5ggMHDsBgMKBhw4b4/vvvLQN7yixatAhnz57Fjh070L59e/Ts2RPR0dHQ6XQ4ePAgrl69Cn9/f6xYscIyBMieefPmVboH6+OPP4777rvPoddTXffffz/efPNNvPfee7j33nvRp08fREVF4eTJk/jjjz8gl8vx2WefoX379tW+9t13341mzZrhzz//RJcuXdCxY0colUrExcVhxowZHng1REREREREdRdDTqo15syZgw0bNmD//v3Yv38/8vLyEB4ejp49e2LixIl47LHHbEKWjz76CFFRUfjiiy+QnJyMwMBA9OnTB6tWrYJWq60waEpISMDx48exePFibNiwASkpKdDr9QgPD0dUVBTGjh2LUaNGWT3njTfewN69e3H8+HFs3rwZhYWFCA4ORu/evfHggw/imWee8fh+nK7w8/PDxo0b8fnnn2PFihXYvXs39Hq9JSx+9dVXbfYddOZrsnr1arz22mvYvn07fvjhBxiNRkRHR3ss5GzZsiX++OMPzJ8/H2vWrMH69eshk8kQFxeHRx55BC+++KLVcJjAwEB89tln2LlzJ/78809s3rwZJSUlaNasGR5++GE8//zz1WqtdsfrnTRpEjZu3Ij/396dx0VV/f8Dfw0www4KyCqbS+KCG7jighsiLrlQmWYoLplCplmWHw2tLMPSMs1yQ/2WpfYRc6HMBTAFd8gFQVNZSlADWWSR7fz+8DfzYZwZNtFh7PV8PObx0Hvuufd9Z86cy33PvecAD9tmixYtNK5bn7ZbnePHj+Pw4cM4evQorl27hiNHjuD+/fuwsLBAt27dMHToUMyaNQs2NjYqdU1NTXH48GF8//33+OGHH3D+/HmcOnUKRkZGcHV1RWBgIN544w3FDOWayMeX1aRz585PLMkJAB9++CF8fHzw1Vdf4dSpUzh58iRsbGzwwgsvYP78+fUegkImk+HgwYP4z3/+g/j4ePzxxx+orKxE//79meQkIiIiIiKqI4moacA1qrf8/HxYWloiLy8PFhYW1a5bUlKCmzdvwt3dHUZGRk8pQiIi+jfhuYaIiIiIiHRNbfNrHJOTiIiIiIiIiIiIdBqTnERERERERERERKTTmOQkIiIiIiIiIiIincYkJxEREREREREREek0JjmJiIiIiIiIiIhIpzHJSURERERERERERDqNSU4iIiIiIiIiIiLSaUxyNjJCCG2HQEREzyieY4iIiIiI6FnFJGcjoaf38KOoqKjQciRERPSskp9j5OccIiIiIiKiZwWvchoJqVQKfX19FBcXazsUIiJ6RhUUFEAqlUIqlWo7FCIiIiIiogbFJGcjIZFIYGJigry8PN7NSUREDa64uBj5+fkwNzeHRCLRdjhEREREREQNykDbAdD/2NraIjU1FWlpabCysoKhoSEvRImIqN6EEKioqEBBQQHy8/NhaGgIGxsbbYdFRERERETU4JjkbERkMhmaN2+Of/75B5mZmdoOh4iInhFSqRRNmjSBjY0N9PX1tR0OERERERFRg2OSs5ExMTGBi4sLysvLUV5eru1wiIhIx+np6UEqlfLJACIiIiIieqYxydlIGRgYwMCAHw8REREREREREVFNOPEQERERERERERER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",
      "text/plain": [
       "<Figure size 1600x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the path to the data folder\n",
    "data_path = r\"C:\\Users\\bwworkma\\Desktop\\FINN Analytics\\FINN-Data-Analytics-BW\\data\"\n",
    "os.makedirs(data_path, exist_ok=True)  # Ensure the directory exists\n",
    "\n",
    "# Explicitly define fig\n",
    "fig, ax = plt.subplots(figsize=(16, 10))\n",
    "\n",
    "# Your plotting code (assuming sue1 to sue5 are already defined)\n",
    "ax.plot(sue1.index, sue1.values, color='skyblue', linewidth=3, label=\"sue1: Most Negative SUE Port\")\n",
    "ax.plot(sue2.index, sue2.values, color='olive', linewidth=3, label=\"sue2\")\n",
    "ax.plot(sue3.index, sue3.values, color='gold', linewidth=3, label=\"sue3\")\n",
    "ax.plot(sue4.index, sue4.values, color='coral', linewidth=3, label=\"sue4\")\n",
    "ax.plot(sue5.index, sue5.values, color='orchid', linewidth=3, label=\"sue5: Most Positive SUE Port\")\n",
    "\n",
    "ax.set_title(\"CARs following EAD for Analyst-based SUE portfolios\\n Sample: S&P 500 members\", fontsize=20)\n",
    "ax.set_xlabel(\"Event time, t (t=0 is Earnings Announcement Date)\", fontsize=16)\n",
    "ax.set_ylabel(\"Cumulative Excess Returns\", fontsize=16)\n",
    "ax.legend(loc=\"best\", fontsize=16)\n",
    "\n",
    "# Save the figure\n",
    "fig.savefig(os.path.join(data_path, \"pead_08_18.png\"))\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
